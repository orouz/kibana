{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--profiling` argument is set to `false`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, profiling is enabled.\n",
      "description": "Disable profiling, if not needed.\n",
      "id": "0434fc0b-4b72-5a73-8bee-8c8c40345165",
      "impact": "Profiling information would not be available.\n",
      "name": "Ensure that the --profiling argument is set to false (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://github.com/kubernetes/community/blob/master/contributors/devel/profiling.md](https://github.com/kubernetes/community/blob/master/contributors/devel/profiling.md)\n",
      "rego_rule_id": "cis_1_2_18",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and set the below parameter.\n```\n--profiling=false\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.18",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b40-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExNzMsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--audit-log-maxage` argument is set to `30` or as appropriate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, auditing is not enabled.\n",
      "description": "Retain the logs for at least 30 days or as appropriate.\n",
      "id": "058dd742-d183-57c8-9115-16ab34615037",
      "impact": "None\n",
      "name": "Ensure that the --audit-log-maxage argument is set to 30 or as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Retaining logs for at least 30 days ensures that you can go back in time and investigate or correlate any events. Set your audit log retention period to 30 days or as per your business requirements.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://kubernetes.io/docs/concepts/cluster-administration/audit/](https://kubernetes.io/docs/concepts/cluster-administration/audit/)\n3. [https://github.com/kubernetes/features/issues/22](https://github.com/kubernetes/features/issues/22)\n",
      "rego_rule_id": "cis_1_2_20",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and set the `--audit-log-maxage` parameter to 30 or\nas an appropriate number of days:\n```\n--audit-log-maxage=30\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.20",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b41-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExNzQsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--audit-log-path` argument is set as appropriate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, auditing is not enabled.\n",
      "description": "Enable auditing on the Kubernetes API Server and set the desired audit log path.\n",
      "id": "07361e5e-0142-57ce-8e42-d6ebd5110d2e",
      "impact": "None\n",
      "name": "Ensure that the --audit-log-path argument is set (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Auditing the Kubernetes API Server provides a security-relevant chronological set of records documenting the sequence of activities that have affected system by individual users, administrators or other components of the system. Even though currently, Kubernetes provides only basic audit capabilities, it should be enabled. You can enable it by setting an appropriate audit log path.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://kubernetes.io/docs/concepts/cluster-administration/audit/](https://kubernetes.io/docs/concepts/cluster-administration/audit/)\n3. [https://github.com/kubernetes/features/issues/22](https://github.com/kubernetes/features/issues/22)\n",
      "rego_rule_id": "cis_1_2_19",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and set the `--audit-log-path` parameter to a suitable\npath and file where you would like audit logs to be written, for example:\n```\n--audit-log-path=/var/log/apiserver/audit.log\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.19",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b42-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExNzUsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--enable-admission-plugins` argument is set to a value that includes\n`NodeRestriction`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `NodeRestriction` is not set.\n",
      "description": "Limit the `Node` and `Pod` objects that a kubelet could modify.\n",
      "id": "0cd77c44-7420-5cac-a366-821b44bf819e",
      "impact": "None\n",
      "name": "Ensure that the admission control plugin NodeRestriction is set (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Using the `NodeRestriction` plug-in ensures that the kubelet is restricted to the `Node` and Pod objects that it could modify as defined. Such kubelets will only be allowed to modify their own `Node` API object, and only modify `Pod` API objects that are bound to their node.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://kubernetes.io/docs/admin/admission-controllers/#noderestriction](https://kubernetes.io/docs/admin/admission-controllers/#noderestriction)\n3. [https://kubernetes.io/docs/admin/authorization/node/](https://kubernetes.io/docs/admin/authorization/node/)\n4. [https://acotten.com/post/kube17-security](https://acotten.com/post/kube17-security)\n",
      "rego_rule_id": "cis_1_2_16",
      "remediation": "Follow the Kubernetes documentation and configure `NodeRestriction` plug-in\non\nkubelets.\nThen, edit the API server pod specification file `/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and set the `--enable-admission-plugins` parameter\nto a value that includes `NodeRestriction`.\n```\n--enable-admission-plugins=...,NodeRestriction,...\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.16",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b43-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExNzYsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the Control Plane node: ``` ps -ef | grep kube-apiserver ``` Verify that the `--tls-cipher-suites` argument is set as outlined in the remediation procedure below.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default the Kubernetes API server supports a wide range of TLS ciphers\n",
      "description": "Ensure that the API server is configured to only use strong cryptographic ciphers.\n",
      "id": "0e3755af-d150-504f-80db-3a5bb1094c4e",
      "impact": "API server clients that cannot support modern cryptographic ciphers will not be able to\nmake connections to the API server.\n",
      "name": "Ensure that the API Server only makes use of StrongCryptographic Ciphers (Manual)",
      "profile_applicability": "• Level 1 - Master Node\n",
      "rationale": "TLS ciphers have had a number of known vulnerabilities and weaknesses, which can\nreduce the protection provided by them. By default Kubernetes supports a number of TLS\ncipher suites including some that have security concerns, weakening the protection\nprovided.\n",
      "references": "1. https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-\nPractices#23-use-secure-cipher-suites\n",
      "rego_rule_id": "cis_1_2_32",
      "remediation": "Edit the API server pod specification file `/etc/kubernetes/manifests/kube-apiserver.yaml`\non the Control Plane node and set the below parameter. ``` --tls-cipher-suites=TLS_AES_128_GCM_SHA256, TLS_AES_256_GCM_SHA384,\nTLS_CHACHA20_POLY1305_SHA256, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\nTLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,\nTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,\nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,\nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,\nTLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,\nTLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_RSA_WITH_3DES_EDE_CBC_SHA,\nTLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256,\nTLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_256_GCM_SHA384. ```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.32",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b44-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExNzcsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command (based on the file location on your system) on the control plane node.\nFor example,\n```\nstat -c %a /etc/kubernetes/scheduler.conf\n```\nVerify that the permissions are `644` or more restrictive.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `scheduler.conf` has permissions of `640`.\n",
      "description": "Ensure that the `scheduler.conf` file has permissions of `644` or more restrictive.\n",
      "id": "140866d3-af45-58a5-9984-cfa9f9498809",
      "impact": "None\n",
      "name": "Ensure that the scheduler.conf file permissions are set to 644 or more restrictive (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The `scheduler.conf` file is the kubeconfig file for the Scheduler. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.\n",
      "references": "1. [https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/](https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/)\n",
      "rego_rule_id": "cis_1_1_15",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchmod 644 /etc/kubernetes/scheduler.conf\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.15",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b45-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExNzgsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on each node:\n```\nps -ef | grep kubelet\n```\nVerify that the `--protect-kernel-defaults` argument is set to `true`.\nIf the `--protect-kernel-defaults` argument is not present, check that there is a Kubelet\nconfig file specified by `--config`, and that the file sets `protectKernelDefaults` to `true`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--protect-kernel-defaults` is not set.\n",
      "description": "Protect tuned kernel parameters from overriding kubelet default kernel parameter values.\n",
      "id": "1727f238-cf56-52bb-86ed-ddf0c141eebc",
      "impact": "You would have to re-tune kernel parameters to match kubelet parameters.\n",
      "name": "Ensure that the --protect-kernel-defaults argument is set to true (Automated)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "Kernel parameters are usually tuned and hardened by the system administrators before putting the systems into production. These parameters protect the kernel and the system. Your kubelet kernel defaults that rely on such parameters should be appropriately set to match the desired secured system state. Ignoring this could potentially lead to running pods with undesired kernel behavior.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubelet/](https://kubernetes.io/docs/admin/kubelet/)\n",
      "rego_rule_id": "cis_4_2_6",
      "remediation": "If using a Kubelet config file, edit the file to set `protectKernelDefaults:\ntrue`.\nIf using command line arguments, edit the kubelet service file\n`/etc/systemd/system/kubelet.service.d/10-kubeadm.conf` on each worker node and\nset the below parameter in `KUBELET_SYSTEM_PODS_ARGS` variable.\n```\n--protect-kernel-defaults=true\n```\nBased on your system, restart the `kubelet` service. For example:\n```\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n```\n",
      "section": "Kubelet",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.2.6",
        "Kubelet"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b46-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExNzksMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Automated AAC auditing has been modified to allow CIS-CAT to input a\nvariable\nfor the / of\nthe kubelet config yaml file.\nPlease set $kubelet_config_yaml= based on the file location on your system\nfor example:\n```\nexport kubelet_config_yaml=/var/lib/kubelet/config.yaml\n```\nTo perform the audit manually:\nRun the below command (based on the file location on your system) on the each worker\nnode. For example,\n```\nstat -c %a /var/lib/kubelet/config.yaml\n```\nVerify that the ownership is set to `root:root`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `/var/lib/kubelet/config.yaml` file as set up by `kubeadm` is owned by `root:root`.\n",
      "description": "Ensure that if the kubelet refers to a configuration file with the `--config` argument, that file is owned by root:root.\n",
      "id": "192af64f-4521-584c-ae84-5c7ad8a11597",
      "impact": "None\n",
      "name": "Ensure that the kubelet --config configuration file ownership is set to root:root (Automated)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "The kubelet reads various parameters, including security settings, from a config file specified by the `--config` argument. If this file is specified you should restrict its file permissions to maintain the integrity of the file. The file should be owned by root:root.\n",
      "references": "1. [https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/](https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/)\n",
      "rego_rule_id": "cis_4_1_10",
      "remediation": "Run the following command (using the config file location identied in the\nAudit step)\n```\nchown root:root /etc/kubernetes/kubelet.conf\n```\n",
      "section": "Worker Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.1.10",
        "Worker Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b47-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExODAsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "On the etcd server node, get the etcd data directory, passed as an argument\n`--data-dir`,\nfrom the below command:\n```\nps -ef | grep etcd\n```\nRun the below command (based on the etcd data directory found above). For example,\n```\nstat -c %U:%G /var/lib/etcd\n```\nVerify that the ownership is set to `etcd:etcd`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, etcd data directory ownership is set to `etcd:etcd`.\n",
      "description": "Ensure that the etcd data directory ownership is set to `etcd:etcd`.\n",
      "id": "1a5c8f4f-fc22-5c1e-b7e1-affa0f03edf0",
      "impact": "None\n",
      "name": "Ensure that the etcd data directory ownership is set to etcd:etcd (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "etcd is a highly-available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. This data directory should be protected from any unauthorized reads or writes. It should be owned by `etcd:etcd`.\n",
      "references": "1. [https://coreos.com/etcd/docs/latest/op-guide/configuration.html#data-dir](https://coreos.com/etcd/docs/latest/op-guide/configuration.html#data-dir)\n2. [https://kubernetes.io/docs/admin/etcd/](https://kubernetes.io/docs/admin/etcd/)\n",
      "rego_rule_id": "cis_1_1_12",
      "remediation": "On the etcd server node, get the etcd data directory, passed as an argument\n`--data-dir`,\nfrom the below command:\n```\nps -ef | grep etcd\n```\nRun the below command (based on the etcd data directory found above). For example,\n```\nchown etcd:etcd /var/lib/etcd\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.12",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b48-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExODEsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nstat -c %a /etc/kubernetes/manifests/kube-controller-manager.yaml\n```\nVerify that the permissions are `644` or more restrictive.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, the `kube-controller-manager.yaml` file has permissions of `640`.\n",
      "description": "Ensure that the controller manager pod specification file has permissions of `644` or more restrictive.\n",
      "id": "1d3a468f-78ca-54ff-a43c-0d205ad832b7",
      "impact": "None\n",
      "name": "Ensure that the controller manager pod specification file permissions are set to 644 or more restrictive (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The controller manager pod specification file controls various parameters that set the behavior of the Controller Manager on the control plane node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n",
      "rego_rule_id": "cis_1_1_3",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchmod 644 /etc/kubernetes/manifests/kube-controller-manager.yaml\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.3",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b49-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExODIsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "List the policies in use for each namespace in the cluster, ensure that at least one policy \ndisallows the admission of containers with the `NET_RAW` capability.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, there are no restrictions on the creation of containers with the `NET_RAW` \ncapability.\n",
      "description": "Do not generally permit containers with the potentially dangerous NET_RAW capability.\n",
      "id": "1d4fadeb-808b-55cb-80db-fe01409e4ebc",
      "impact": "Pods with containers which run with the NET_RAW capability will not be permitted.\n",
      "name": "Minimize the admission of containers with the NET_RAW capability (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Containers run with a default set of capabilities as assigned by the Container Runtime. By default this can include potentially dangerous capabilities. With Docker as the container runtime the NET_RAW capability is enabled which may be misused by malicious containers. Ideally, all containers should drop this capability. There should be at least one admission control policy defined which does not permit  containers with the NET_RAW capability.  If you need to run containers with this capability, this should be defined in a separate  policy and you should carefully check to ensure that only limited service accounts and  users are given permission to use that policy.\n",
      "references": "1. [https://kubernetes.io/docs/concepts/security/pod-security-standards/](https://kubernetes.io/docs/concepts/security/pod-security-standards/)\n2. [https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/](https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/)\n",
      "rego_rule_id": "cis_5_2_8",
      "remediation": "Add policies to each namespace in the cluster which has user workloads to restrict the \nadmission of containers with the `NET_RAW` capability.\n",
      "section": "Pod Security Standards",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 5.2.8",
        "Pod Security Standards"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b4a-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExODMsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "List the policies in use for each namespace in the cluster, ensure that each policy disallows \nthe admission of `hostNetwork` containers\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, there are no restrictions on the creation of `hostNetwork` containers.\n",
      "description": "Do not generally permit containers to be run with the `hostNetwork` flag set to true.\n",
      "id": "1f4cc187-dedb-553d-b41f-8e26682415b5",
      "impact": "Pods defined with `spec.hostNetwork: true` will not be permitted unless they are run under a specific policy.\n",
      "name": "Minimize the admission of containers wishing to share the host network namespace (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "A container running in the host's network namespace could access the local loopback device, and could access network traffic to and from other pods. There should be at least one admission control policy defined which does not permit containers to share the host network namespace. If you need to run containers which require access to the host's network namespaces, this should be defined in a separate policy and you should carefully check to ensure that only limited service accounts and users are given permission to use that policy.\n",
      "references": "1. [https://kubernetes.io/docs/concepts/security/pod-security-standards/](https://kubernetes.io/docs/concepts/security/pod-security-standards/)\n",
      "rego_rule_id": "cis_5_2_5",
      "remediation": "Add policies to each namespace in the cluster which has user workloads to restrict the \nadmission of `hostNetwork` containers.\n",
      "section": "Pod Security Standards",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 5.2.5",
        "Pod Security Standards"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b4b-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExODQsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--disable-admission-plugins` argument is set to a value that does not\ninclude `NamespaceLifecycle`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `NamespaceLifecycle` is set.\n",
      "description": "Reject creating objects in a namespace that is undergoing termination.\n",
      "id": "248339e7-4a2c-598b-954e-b676176f0e49",
      "impact": "None\n",
      "name": "Ensure that the admission control plugin NamespaceLifecycle is set (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Setting admission control policy to `NamespaceLifecycle` ensures that objects cannot be created in non-existent namespaces, and that namespaces undergoing termination are not used for creating the new objects. This is recommended to enforce the integrity of the namespace termination process and also for the availability of the newer objects.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://kubernetes.io/docs/admin/admission-controllers/#namespacelifecycle](https://kubernetes.io/docs/admin/admission-controllers/#namespacelifecycle)\n",
      "rego_rule_id": "cis_1_2_15",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and set the `--disable-admission-plugins` parameter\nto ensure it does not include `NamespaceLifecycle`.\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.15",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b4c-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExODUsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--etcd-cafile` argument exists and it is set as appropriate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--etcd-cafile` is not set.\n",
      "description": "etcd should be configured to make use of TLS encryption for client connections.\n",
      "id": "271a6cd7-9498-5bc1-bac4-8d58f7b46e96",
      "impact": "TLS and client certificate authentication must be configured for etcd.\n",
      "name": "Ensure that the --etcd-cafile argument is set as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the API server to identify itself to the etcd server using a SSL Certificate Authority file.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://coreos.com/etcd/docs/latest/op-guide/security.html](https://coreos.com/etcd/docs/latest/op-guide/security.html)\n",
      "rego_rule_id": "cis_1_2_29",
      "remediation": "Follow the Kubernetes documentation and set up the TLS connection between\nthe apiserver and etcd. Then, edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` on the control plane node and set the etcd\ncertificate authority file parameter.\n```\n--etcd-cafile=<path/to/ca-file>\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.29",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b4d-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExODYsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nstat -c %U:%G /etc/kubernetes/admin.conf\n```\nVerify that the ownership is set to `root:root`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `admin.conf` file ownership is set to `root:root`.\n",
      "description": "Ensure that the `admin.conf` file ownership is set to `root:root`.\n",
      "id": "272d95bf-8e18-5a8e-b8b0-76d220de9664",
      "impact": "None.\n",
      "name": "Ensure that the admin.conf file ownership is set to root:root (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The `admin.conf` file contains the admin credentials for the cluster. You should set its file ownership to maintain the integrity of the file. The file should be owned by root:root.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubeadm/](https://kubernetes.io/docs/admin/kubeadm/)\n",
      "rego_rule_id": "cis_1_1_14",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchown root:root /etc/kubernetes/admin.conf\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.14",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b4e-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExODcsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "For each namespace in the cluster, review the rights assigned to the default service account and ensure that it has no roles or cluster roles bound to it apart from the defaults. Additionally ensure that the `automountServiceAccountToken: false` setting is in place for each default service account.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default the `default` service account allows for its service account token\nto be mounted\nin pods in its namespace.\n",
      "description": "The `default` service account should not be used to ensure that rights granted to applications can be more easily audited and reviewed.\n",
      "id": "2b399496-f79d-5533-8a86-4ea00b95e3bd",
      "impact": "All workloads which require access to the Kubernetes API will require an explicit service account to be created.\n",
      "name": "Ensure that default service accounts are not actively used. (Manual)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Kubernetes provides a `default` service account which is used by cluster workloads where no specific service account is assigned to the pod. Where access to the Kubernetes API from a pod is required, a specific service account should be created for that pod, and rights granted to that service account. The default service account should be configured such that it does not provide a service account token and does not have any explicit rights assignments.\n",
      "references": "1. [https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)\n",
      "rego_rule_id": "cis_5_1_5",
      "remediation": "Create explicit service accounts wherever a Kubernetes workload requires\nspecific access\nto the Kubernetes API server.\nModify the configuration of each default service account to include this value\n```\nautomountServiceAccountToken: false\n```\n",
      "section": "RBAC and Service Accounts",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 5.1.5",
        "RBAC and Service Accounts"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b4f-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExODgsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on each node:\n```\nps -ef | grep kubelet\n```\nIf the `--authorization-mode` argument is present check that it is not set to `AlwaysAllow`. If\nit is not present check that there is a Kubelet config file specified by `--config`, and that file\nsets `authorization: mode` to something other than `AlwaysAllow`.\nIt is also possible to review the running configuration of a Kubelet via the `/configz`\nendpoint on the Kubelet API port (typically `10250/TCP`). Accessing these with appropriate\ncredentials will provide details of the Kubelet's configuration.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--authorization-mode` argument is set to `AlwaysAllow`.\n",
      "description": "Do not allow all requests. Enable explicit authorization.\n",
      "id": "307e747c-5998-5bf8-a8e3-d24aab71e558",
      "impact": "Unauthorized requests will be denied.\n",
      "name": "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "Kubelets, by default, allow all authenticated requests (even anonymous ones) without needing explicit authorization checks from the apiserver. You should restrict this behavior and only allow explicitly authorized requests.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubelet/](https://kubernetes.io/docs/admin/kubelet/)\n2. [https://kubernetes.io/docs/admin/kubelet-authentication-authorization/#kubelet-authentication](https://kubernetes.io/docs/admin/kubelet-authentication-authorization/#kubelet-authentication)\n",
      "rego_rule_id": "cis_4_2_2",
      "remediation": "If using a Kubelet config file, edit the file to set `authorization: mode`\nto\n`Webhook`.\nIf using executable arguments, edit the kubelet service file\n`/etc/systemd/system/kubelet.service.d/10-kubeadm.conf` on each worker node and\nset the below parameter in `KUBELET_AUTHZ_ARGS` variable.\n```\n--authorization-mode=Webhook\n```\nBased on your system, restart the `kubelet` service. For example:\n```\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n```\n",
      "section": "Kubelet",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.2.2",
        "Kubelet"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b50-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExODksMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nstat -c %U:%G /etc/kubernetes/manifests/kube-apiserver.yaml\n```\nVerify that the ownership is set to `root:root`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, the `kube-apiserver.yaml` file ownership is set to `root:root`.\n",
      "description": "Ensure that the API server pod specification file ownership is set to `root:root`.\n",
      "id": "3b0587fb-01a3-50c2-9d3d-6675f376d509",
      "impact": "None\n",
      "name": "Ensure that the API server pod specification file ownership is set to root:root (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The API server pod specification file controls various parameters that set the behavior of the API server. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n",
      "rego_rule_id": "cis_1_1_2",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchown root:root /etc/kubernetes/manifests/kube-apiserver.yaml\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.2",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b51-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExOTAsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that if the `--service-account-lookup` argument exists it is set to `true`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--service-account-lookup` argument is set to `true`.\n",
      "description": "Validate service account before validating token.\n",
      "id": "3b9e7a41-95c8-5262-8643-c0e15d2eb8c7",
      "impact": "None\n",
      "name": "Ensure that the --service-account-lookup argument is set to true (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "If `--service-account-lookup` is not enabled, the apiserver only verifies that the authentication token is valid, and does not validate that the service account token mentioned in the request is actually present in etcd. This allows using a service account token even after the corresponding service account is deleted. This is an example of time of check to time of use security issue.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://github.com/kubernetes/kubernetes/issues/24167](https://github.com/kubernetes/kubernetes/issues/24167)\n3. [https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use](https://en.wikipedia.org/wiki/Time_of_check_to_time_of_use)\n",
      "rego_rule_id": "cis_1_2_24",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and set the below parameter.\n```\n--service-account-lookup=true\n```\nAlternatively, you can delete the `--service-account-lookup` parameter from this file so\nthat the default takes effect.\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.24",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b52-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExOTEsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Automated AAC auditing has been modified to allow CIS-CAT to input a\nvariable\nfor the / of\nthe kubelet config file.\nPlease set $kubelet_config= based on the file location on your system\nfor example:\n```\nexport kubelet_config=/etc/kubernetes/kubelet.conf\n```\nTo perform the audit manually:\nRun the below command (based on the file location on your system) on the each worker\nnode. For example,\n```\nstat -c %a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n```\nVerify that the ownership is set to `root:root`. Verify that the permissions are `644` or more\nrestrictive.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `kubelet.conf` file has permissions of `640`.\n",
      "description": "Ensure that the `kubelet.conf` file has permissions of `644` or more restrictive.\n",
      "id": "3be1207a-0cfe-5dbd-abde-97e50421466d",
      "impact": "None\n",
      "name": "Ensure that the --kubeconfig kubelet.conf file permissions are set to 644 or more restrictive (Automated)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "The `kubelet.conf` file is the kubeconfig file for the node, and controls various parameters that set the behavior and identity of the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubelet/](https://kubernetes.io/docs/admin/kubelet/)\n",
      "rego_rule_id": "cis_4_1_5",
      "remediation": "Run the below command (based on the file location on your system) on the\neach\nworker\nnode. For example,\n```\nchmod 644 /etc/kubernetes/kubelet.conf\n```\n",
      "section": "Worker Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.1.5",
        "Worker Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b53-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExOTIsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "On the etcd server node, get the etcd data directory, passed as an argument\n`--data-dir`,\nfrom the below command:\n```\nps -ef | grep etcd\n```\nRun the below command (based on the etcd data directory found above). For example,\n```\nstat -c %a /var/lib/etcd\n```\nVerify that the permissions are `700` or more restrictive.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, etcd data directory has permissions of `755`.\n",
      "description": "Ensure that the etcd data directory has permissions of `700` or more restrictive.\n",
      "id": "3e07507c-31ba-5d01-800f-cfb8c0a09787",
      "impact": "None\n",
      "name": "Ensure that the etcd data directory permissions are set to 700 or more restrictive (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "etcd is a highly-available key-value store used by Kubernetes deployments for persistent storage of all of its REST API objects. This data directory should be protected from any unauthorized reads or writes. It should not be readable or writable by any group members or the world.\n",
      "references": "1. [https://coreos.com/etcd/docs/latest/op-guide/configuration.html#data-dir](https://coreos.com/etcd/docs/latest/op-guide/configuration.html#data-dir)\n2. [https://kubernetes.io/docs/admin/etcd/](https://kubernetes.io/docs/admin/etcd/)\n",
      "rego_rule_id": "cis_1_1_11",
      "remediation": "On the etcd server node, get the etcd data directory, passed as an argument\n`--data-dir`,\nfrom the below command:\n```\nps -ef | grep etcd\n```\nRun the below command (based on the etcd data directory found above). For example,\n```\nchmod 700 /var/lib/etcd\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.11",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b54-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExOTMsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--disable-admission-plugins` argument is set to a value that does not\nincludes `ServiceAccount`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `ServiceAccount` is set.\n",
      "description": "Automate service accounts management.\n",
      "id": "3f2a98b2-26a6-52bf-97ad-68ef81df953c",
      "impact": "None.\n",
      "name": "Ensure that the admission control plugin ServiceAccount is set (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "When you create a pod, if you do not specify a service account, it is automatically assigned the default service account in the same namespace. You should create your own service account and let the API server manage its security tokens.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://kubernetes.io/docs/admin/admission-controllers/#serviceaccount](https://kubernetes.io/docs/admin/admission-controllers/#serviceaccount)\n3. [https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)\n",
      "rego_rule_id": "cis_1_2_14",
      "remediation": "Follow the documentation and create `ServiceAccount` objects as per your\nenvironment.\nThen, edit the API server pod specification file `/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and ensure that the `--disable-admission-plugins`\nparameter is set to a value that does not include `ServiceAccount`.\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.14",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b55-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExOTQsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "List the policies in use for each namespace in the cluster, ensure that each policy disallows \nthe admission of `hostIPC` containers\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, there are no restrictions on the creation of hostIPC containers.\n",
      "description": "Do not generally permit containers to be run with the `hostIPC` flag set to true.\n",
      "id": "41e05dea-5fdd-50a7-9149-5be11cd8a63e",
      "impact": "Pods defined with `spec.hostIPC: true` will not be permitted unless they are run under a specific policy.\n",
      "name": "Minimize the admission of containers wishing to share the hostIPC namespace (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "A container running in the host's IPC namespace can use IPC to interact with processes outside the container. There should be at least one admission control policy defined which does not permit containers to share the host IPC namespace. If you need to run containers which require hostIPC, this should be defined in a separate policy and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to use that policy.\n",
      "references": "1. [https://kubernetes.io/docs/concepts/security/pod-security-standards/](https://kubernetes.io/docs/concepts/security/pod-security-standards/)\n",
      "rego_rule_id": "cis_5_2_4",
      "remediation": "Add policies to each namespace in the cluster which has user workloads to restrict the \nadmission of `hostIPC` containers.\n",
      "section": "Pod Security Standards",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 5.2.4",
        "Pod Security Standards"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b56-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExOTUsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the Control Plane node. For example, ``` ls -laR /etc/kubernetes/pki/*.crt ``` Verify that the permissions are 644 or more restrictive.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, the certificates used by Kubernetes are set to have permissions of 644\n",
      "description": "Ensure that Kubernetes PKI certificate files have permissions of 644 or more restrictive.\n",
      "id": "428bd666-2825-532e-a484-0f31ea5db0f9",
      "impact": "None\n",
      "name": "Ensure that the Kubernetes PKI certificate file permissions are set to 644 or more restrictive (Manual)",
      "profile_applicability": "• Level 1 - Master Node\n",
      "rationale": "Kubernetes makes use of a number of certificate files as part of the operation of its components.\nThe permissions on these files should be set to 644 or more restrictive to protect their integrity.\n",
      "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/\n",
      "rego_rule_id": "cis_1_1_20",
      "remediation": "Run the below command (based on the file location on your system) on the Control Plane node. For example, ``` chmod -R 644 /etc/kubernetes/pki/*.crt ```\n",
      "section": "Master Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.20",
        "Master Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b57-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExOTYsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the etcd server node:\n```\nps -ef | grep etcd\n```\nVerify that if the `--auto-tls` argument exists, it is not set to `true`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--auto-tls` is set to `false`.\n",
      "description": "Do not use self-signed certificates for TLS.\n",
      "id": "43af3bd9-c0b8-5f06-b1c0-8a1295983524",
      "impact": "Clients will not be able to use self-signed certificates for TLS.\n",
      "name": "Ensure that the --auto-tls argument is not set to true (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should not be available to unauthenticated clients. You should enable the client authentication via valid certificates to secure the access to the etcd service.\n",
      "references": "1. [https://coreos.com/etcd/docs/latest/op-guide/security.html](https://coreos.com/etcd/docs/latest/op-guide/security.html)\n2. [https://kubernetes.io/docs/admin/etcd/](https://kubernetes.io/docs/admin/etcd/)\n3. [https://coreos.com/etcd/docs/latest/op-guide/configuration.html#auto-tls](https://coreos.com/etcd/docs/latest/op-guide/configuration.html#auto-tls)\n",
      "rego_rule_id": "cis_2_3",
      "remediation": "Edit the etcd pod specification file `/etc/kubernetes/manifests/etcd.yaml`\non\nthe control plane\nnode and either remove the `--auto-tls` parameter or set it to `false`.\n```\n--auto-tls=false\n```\n",
      "section": "etcd",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 2.3",
        "etcd"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b58-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExOTcsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Ignore this check if `serverTLSBootstrap` is `true` in the kubelet config file\nor if the `--rotate-server-certificates` parameter is set on kubelet\nRun the following command on each node:\n```\nps -ef | grep kubelet\n```\nVerify that `RotateKubeletServerCertificate` argument exists and is set to `true`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, kubelet server certificate rotation is enabled.\n",
      "description": "Enable kubelet server certificate rotation.\n",
      "id": "46d69440-3946-50f6-83b3-a0987551afa2",
      "impact": "None\n",
      "name": "Verify that the RotateKubeletServerCertificate argument is set to true (Manual)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "`RotateKubeletServerCertificate` causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad. Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.\n",
      "references": "1. [https://github.com/kubernetes/kubernetes/pull/45059](https://github.com/kubernetes/kubernetes/pull/45059)\n2. [https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#kubelet-configuration](https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#kubelet-configuration)\n",
      "rego_rule_id": "cis_4_2_12",
      "remediation": "Edit the kubelet service file\n`/etc/systemd/system/kubelet.service.d/10-kubeadm.conf`\non each worker node and set the below parameter in `KUBELET_CERTIFICATE_ARGS` variable.\n```\n--feature-gates=RotateKubeletServerCertificate=true\n```\nBased on your system, restart the kubelet service. For example:\n```\nsystemctl daemon-reload\n\nsystemctl restart kubelet.service\n```\n",
      "section": "Kubelet",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.2.12",
        "Kubelet"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b59-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExOTgsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--service-account-key-file` argument exists and is set as appropriate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--service-account-key-file` argument is not set.\n",
      "description": "Explicitly set a service account public key file for service accounts on the apiserver.\n",
      "id": "4caf31ec-2fe2-5337-b1e1-9cbf498de17f",
      "impact": "The corresponding private key must be provided to the controller manager. You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy.\n",
      "name": "Ensure that the --service-account-key-file argument is set as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "By default, if no `--service-account-key-file` is specified to the apiserver, it uses the private key from the TLS serving certificate to verify service account tokens. To ensure that the keys for service account tokens could be rotated as needed, a separate public/private key pair should be used for signing service account tokens. Hence, the public key should be specified to the apiserver with `--service-account-key-file`.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://github.com/kubernetes/kubernetes/issues/24167](https://github.com/kubernetes/kubernetes/issues/24167)\n",
      "rego_rule_id": "cis_1_2_25",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and set the `--service-account-key-file` parameter\nto the public key file for service accounts:\n```\n--service-account-key-file=<filename>\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.25",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b5a-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzExOTksMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-scheduler\n```\nVerify that the `--bind-address` argument is set to 127.0.0.1\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, the `--bind-address` parameter is set to 0.0.0.0\n",
      "description": "Do not bind the scheduler service to non-loopback insecure addresses.\n",
      "id": "54fabe1f-8eb5-5015-82b5-30db926064c0",
      "impact": "None\n",
      "name": "Ensure that the --bind-address argument is set to 127.0.0.1 (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The Scheduler API service which runs on port 10251/TCP by default is used for health and metrics information and is available without authentication or encryption. As such it should only be bound to a localhost interface, to minimize the cluster's attack surface\n",
      "references": "1. [https://kubernetes.io/docs/reference/command-line-tools-reference/kube-scheduler/](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-scheduler/)\n",
      "rego_rule_id": "cis_1_4_2",
      "remediation": "Edit the Scheduler pod specification file\n`/etc/kubernetes/manifests/kube-scheduler.yaml` \non the control plane node and ensure the correct value for the `--bind-address`\nparameter\n",
      "section": "Scheduler",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.4.2",
        "Scheduler"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b5b-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMDAsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on each node:\n```\nps -ef | grep kubelet\n```\nVerify that the `--read-only-port` argument exists and is set to `0`.\nIf the `--read-only-port` argument is not present, check that there is a Kubelet config file\nspecified by `--config`. Check that if there is a `readOnlyPort` entry in the file, it is set to `0`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--read-only-port` is set to `10255/TCP`. However, if a config file\nis specified by --config the default value for `readOnlyPort` is `0`.\n",
      "description": "Disable the read-only port.\n",
      "id": "55983039-6973-57a9-9ed2-fb577c0be1f6",
      "impact": "Removal of the read-only port will require that any service which made use\nof it will need to be re-configured to use the main Kubelet API.\n",
      "name": "Verify that the --read-only-port argument is set to 0 (Manual)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "The Kubelet process provides a read-only API in addition to the main Kubelet API. Unauthenticated access is provided to this read-only API which could possibly retrieve potentially sensitive information about the cluster.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubelet/](https://kubernetes.io/docs/admin/kubelet/)\n",
      "rego_rule_id": "cis_4_2_4",
      "remediation": "If using a Kubelet config file, edit the file to set `readOnlyPort` to `0`.\nIf using command line arguments, edit the kubelet service file\n`/etc/systemd/system/kubelet.service.d/10-kubeadm.conf` on each worker node and\nset the below parameter in `KUBELET_SYSTEM_PODS_ARGS` variable.\n``` \n--read-only-port=0\n```\nBased on your system, restart the kubelet service. For example:\n```\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n```\n",
      "section": "Kubelet",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.2.4",
        "Kubelet"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b5c-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMDEsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--tls-cert-file` and `--tls-private-key-file` arguments exist and they\nare set as appropriate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--tls-cert-file` and `--tls-private-key-file` arguments are not set.\n",
      "description": "Setup TLS connection on the API server.\n",
      "id": "576f7a4e-bfec-5e1e-9b41-92212823e83d",
      "impact": "TLS and client certificate authentication must be configured for your Kubernetes cluster deployment.\n",
      "name": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "API server communication contains sensitive parameters that should remain encrypted in transit. Configure the API server to serve only HTTPS traffic.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/](http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/)\n3. [https://github.com/kelseyhightower/docker-kubernetes-tls-guide](https://github.com/kelseyhightower/docker-kubernetes-tls-guide)\n",
      "rego_rule_id": "cis_1_2_27",
      "remediation": "Follow the Kubernetes documentation and set up the TLS connection on the\napiserver.\nThen, edit the API server pod specification file `/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and set the TLS certificate and private key file\nparameters.\n```\n--tls-cert-file=<path/to/tls-certificate-file>\n--tls-private-key-file=<path/to/tls-key-file>\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.27",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b5d-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMDIsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nstat -c %U:%G /etc/kubernetes/controller-manager.conf\n```\nVerify that the ownership is set to `root:root`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `controller-manager.conf` file ownership is set to `root:root`.\n",
      "description": "Ensure that the `controller-manager.conf` file ownership is set to `root:root`.\n",
      "id": "5867e0c0-71c5-5f21-8c9c-621a160bfbd9",
      "impact": "None\n",
      "name": "Ensure that the controller-manager.conf file ownership is set to root:root (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The `controller-manager.conf` file is the kubeconfig file for the Controller Manager. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-controller-manager/](https://kubernetes.io/docs/admin/kube-controller-manager/)\n",
      "rego_rule_id": "cis_1_1_18",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchown root:root /etc/kubernetes/controller-manager.conf\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.18",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b5e-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMDMsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on each node:\n```\nps -ef | grep kubelet\n```\nVerify that `--hostname-override` argument does not exist.\nNote This setting is not configurable via the Kubelet config file.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--hostname-override argument` is not set.\n",
      "description": "Do not override node hostnames.\n",
      "id": "58b41542-b102-5c9a-81fb-89aa5bc0fcb8",
      "impact": "Some cloud providers may require this flag to ensure that hostname matches\nnames issued by the cloud provider. \nIn these environments, this recommendation should not apply.\n",
      "name": "Ensure that the --hostname-override argument is not set (Manual)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "Overriding hostnames could potentially break TLS setup between the kubelet and the apiserver.  Additionally, with overridden hostnames, it becomes increasingly difficult to associate logs with a particular node and process them for security analytics. Hence, you should setup your kubelet nodes with resolvable FQDNs and avoid overriding the hostnames with IPs.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubelet/](https://kubernetes.io/docs/admin/kubelet/)\n2. [https://github.com/kubernetes/kubernetes/issues/22063](https://github.com/kubernetes/kubernetes/issues/22063)\n",
      "rego_rule_id": "cis_4_2_8",
      "remediation": "Edit the kubelet service file `/etc/systemd/system/kubelet.service.d/10-kubeadm.conf`\non each worker node and remove the `--hostname-override` argument from the\n`KUBELET_SYSTEM_PODS_ARGS` variable.\nBased on your system, restart the `kubelet` service. For example:\n```\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n```\n",
      "section": "Kubelet",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.2.8",
        "Kubelet"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b5f-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMDQsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the etcd server node:\n```\nps -ef | grep etcd\n```\nVerify that if the `--peer-auto-tls` argument exists, it is not set to `true`.\n**Note:** This recommendation is applicable only for etcd clusters. If you are using only one\netcd server in your environment then this recommendation is not applicable.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "**Note:** This recommendation is applicable only for etcd clusters. If you\nare using only one etcd server in your environment then this recommendation\nis not applicable. By default, `--peer-auto-tls` argument is set to `false`.\n",
      "description": "Do not use automatically generated self-signed certificates for TLS connections between peers.\n",
      "id": "59f978f4-c825-578a-bc21-ab5f395c5cd9",
      "impact": "All peers attempting to communicate with the etcd server will require a valid client certificate for authentication.\n",
      "name": "Ensure that the --peer-auto-tls argument is not set to true (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be accessible only by authenticated etcd peers in the etcd cluster. Hence, do not use self- signed certificates for authentication.\n",
      "references": "1. [https://coreos.com/etcd/docs/latest/op-guide/security.html](https://coreos.com/etcd/docs/latest/op-guide/security.html)\n2. [https://kubernetes.io/docs/admin/etcd/](https://kubernetes.io/docs/admin/etcd/)\n3. [https://coreos.com/etcd/docs/latest/op-guide/configuration.html#peer-auto-tls](https://coreos.com/etcd/docs/latest/op-guide/configuration.html#peer-auto-tls)\n",
      "rego_rule_id": "cis_2_6",
      "remediation": "Edit the etcd pod specification file `/etc/kubernetes/manifests/etcd.yaml`\non\nthe control plane\nnode and either remove the `--peer-auto-tls` parameter or set it to `false`.\n```\n--peer-auto-tls=false\n```\n",
      "section": "etcd",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 2.6",
        "etcd"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b60-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMDUsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--kubelet-client-certificate` and `--kubelet-client-key` arguments\nexist and they are set as appropriate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, certificate-based kubelet authentication is not set.\n",
      "description": "Enable certificate based kubelet authentication.\n",
      "id": "5c060a65-bbc5-5af4-9a42-338717937ec4",
      "impact": "You require TLS to be configured on apiserver as well as kubelets.\n",
      "name": "Ensure that the --kubelet-client-certificate and --kubelet-client-keyarguments are set as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The apiserver, by default, does not authenticate itself to the kubelet's HTTPS endpoints. The requests from the apiserver are treated anonymously. You should set up certificate- based kubelet authentication to ensure that the apiserver authenticates itself to kubelets when submitting requests.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://kubernetes.io/docs/admin/kubelet-authentication-authorization/](https://kubernetes.io/docs/admin/kubelet-authentication-authorization/)\n3. [https://kubernetes.io/docs/concepts/cluster-administration/master-node-communication/#apiserver---kubelet](https://kubernetes.io/docs/concepts/cluster-administration/master-node-communication/#apiserver---kubelet)\n",
      "rego_rule_id": "cis_1_2_5",
      "remediation": "Follow the Kubernetes documentation and set up the TLS connection between\nthe\napiserver and kubelets. Then, edit API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` on the control plane node and set the\nkubelet client certificate and key parameters as below.\n```\n--kubelet-client-certificate=<path/to/client-certificate-file>\n--kubelet-client-key=<path/to/client-key-file>\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.5",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b61-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMDYsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the Control Plane node. For example, ``` ls -laR /etc/kubernetes/pki/*.key ``` Verify that the permissions are 600.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, the keys used by Kubernetes are set to have permissions of 600\n",
      "description": "Ensure that Kubernetes PKI key files have permissions of 600.\n",
      "id": "5ee652ed-952d-57d3-8643-87f95d046f25",
      "impact": "None\n",
      "name": "Ensure that the Kubernetes PKI key file permissions are set to 600 (Manual)",
      "profile_applicability": "• Level 1 - Master Node\n",
      "rationale": "Kubernetes makes use of a number of key files as part of the operation of its components.\nThe permissions on these files should be set to 600 to protect their integrity and confidentiality.\n",
      "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/\n",
      "rego_rule_id": "cis_1_1_21",
      "remediation": "Run the below command (based on the file location on your system) on the  Control Plane node. For example, ``` chmod -R 600 /etc/kubernetes/pki/*.key ```\n",
      "section": "Master Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.21",
        "Master Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b62-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMDcsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-scheduler\n```\nVerify that the `--profiling` argument is set to `false`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, profiling is enabled.\n",
      "description": "Disable profiling, if not needed.\n",
      "id": "63ea14ed-b605-5fe1-b35d-6b254f16d8ab",
      "impact": "Profiling information would not be available.\n",
      "name": "Ensure that the --profiling argument is set to false (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-scheduler/](https://kubernetes.io/docs/admin/kube-scheduler/)\n2. [https://github.com/kubernetes/community/blob/master/contributors/devel/profiling.md](https://github.com/kubernetes/community/blob/master/contributors/devel/profiling.md)\n",
      "rego_rule_id": "cis_1_4_1",
      "remediation": "Edit the Scheduler pod specification file\n`/etc/kubernetes/manifests/kube-scheduler.yaml` \nfile on the control plane node and set the below parameter.\n```\n--profiling=false\n```\n",
      "section": "Scheduler",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.4.1",
        "Scheduler"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b63-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMDgsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Automated AAC auditing has been modified to allow CIS-CAT to input a\nvariable\nfor the / of\nthe kubelet config yaml file.\nPlease set $kubelet_config_yaml= based on the file location on your system\nfor example:\n```\nexport kubelet_config_yaml=/var/lib/kubelet/config.yaml\n```\nTo perform the audit manually:\nRun the below command (based on the file location on your system) on the each worker\nnode. For example,\n```\nstat -c %a /var/lib/kubelet/config.yaml\n```\nVerify that the permissions are `644` or more restrictive.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, the /var/lib/kubelet/config.yaml file as set up by `kubeadm` has permissions of 644.\n",
      "description": "Ensure that if the kubelet refers to a configuration file with the `--config` argument, that file has permissions of 644 or more restrictive.\n",
      "id": "655e7d25-f5a9-547f-847c-70ee6c1ca801",
      "impact": "None\n",
      "name": "Ensure that the kubelet --config configuration file has permissions set to 644 or more restrictive (Automated)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "The kubelet reads various parameters, including security settings, from a config file specified by the `--config` argument. If this file is specified you should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.\n",
      "references": "1. [https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/](https://kubernetes.io/docs/tasks/administer-cluster/kubelet-config-file/)\n",
      "rego_rule_id": "cis_4_1_9",
      "remediation": "Run the following command (using the config file location identied in the\nAudit step)\n```\nchmod 644 /var/lib/kubelet/config.yaml\n```\n",
      "section": "Worker Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.1.9",
        "Worker Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b64-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMDksMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nstat -c %a /etc/kubernetes/manifests/kube-apiserver.yaml\n```\nVerify that the permissions are `644` or more restrictive.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, the `kube-apiserver.yaml` file has permissions of `640`.\n",
      "description": "Ensure that the API server pod specification file has permissions of `644` or more restrictive.\n",
      "id": "6664c1b8-05f2-5872-a516-4b2c3c36d2d7",
      "impact": "None\n",
      "name": "Ensure that the API server pod specification file permissions are set to 644 or more restrictive (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The API server pod specification file controls various parameters that set the behavior of the API server. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n",
      "rego_rule_id": "cis_1_1_1",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchmod 644 /etc/kubernetes/manifests/kube-apiserver.yaml\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.1",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b65-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMTAsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nstat -c %a /etc/kubernetes/manifests/kube-scheduler.yaml\n```\nVerify that the permissions are `644` or more restrictive.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `kube-scheduler.yaml` file has permissions of `640`.\n",
      "description": "Ensure that the scheduler pod specification file has permissions of `644` or more restrictive.\n",
      "id": "66cf51af-50b4-5570-be5b-afe549fafd62",
      "impact": "None\n",
      "name": "Ensure that the scheduler pod specification file permissions are set to 644 or more restrictive (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The scheduler pod specification file controls various parameters that set the behavior of the Scheduler service in the control plane node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-scheduler/](https://kubernetes.io/docs/admin/kube-scheduler/)\n",
      "rego_rule_id": "cis_1_1_5",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchmod 644 /etc/kubernetes/manifests/kube-scheduler.yaml\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.5",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b66-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMTEsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the etcd server node\n```\nps -ef | grep etcd\n```\nVerify that the `--cert-file` and the `--key-file` arguments are set as appropriate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, TLS encryption is not set.\n",
      "description": "Configure TLS encryption for the etcd service.\n",
      "id": "670e64f4-c52c-5efa-b0dd-6dce8175e4c0",
      "impact": "Client connections only over TLS would be served.\n",
      "name": "Ensure that the --cert-file and --key-file arguments are set as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit.\n",
      "references": "1. [https://coreos.com/etcd/docs/latest/op-guide/security.html](https://coreos.com/etcd/docs/latest/op-guide/security.html)\n2. [https://kubernetes.io/docs/admin/etcd/](https://kubernetes.io/docs/admin/etcd/)\n",
      "rego_rule_id": "cis_2_1",
      "remediation": "Follow the etcd service documentation and configure TLS encryption.\nThen, edit the etcd pod specification file `/etc/kubernetes/manifests/etcd.yaml` on the\ncontrol plane node and set the below parameters.\n```\n--cert-file=</path/to/ca-file>\n--key-file=</path/to/key-file>\n```\n",
      "section": "etcd",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 2.1",
        "etcd"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b67-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMTIsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--token-auth-file` argument does not exist.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--token-auth-file` argument is not set.\n",
      "description": "Do not use token based authentication.\n",
      "id": "6c8f1b4a-9e41-5fdb-b4bf-57b850ea1d29",
      "impact": "You will have to configure and use alternate authentication mechanisms such as certificates. Static token based authentication could not be used.\n",
      "name": "Ensure that the --token-auth-file parameter is not set (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The token-based authentication utilizes static tokens to authenticate requests to the apiserver. The tokens are stored in clear-text in a file on the apiserver, and cannot be revoked or rotated without restarting the apiserver. Hence, do not use static token-based authentication.\n",
      "references": "1. [https://kubernetes.io/docs/admin/authentication/#static-token-file](https://kubernetes.io/docs/admin/authentication/#static-token-file)\n2. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n",
      "rego_rule_id": "cis_1_2_2",
      "remediation": "Follow the documentation and configure alternate mechanisms for\nauthentication. Then,\nedit the API server pod specification file `/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and remove the `--token-auth-file=<filename>`\nparameter.\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.2",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b68-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMTMsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nstat -c %U:%G /etc/kubernetes/scheduler.conf\n```\nVerify that the ownership is set to `root:root`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `scheduler.conf` file ownership is set to `root:root`.\n",
      "description": "Ensure that the `scheduler.conf` file ownership is set to `root:root`.\n",
      "id": "6cfcb087-18c7-5cb1-95fd-0dc074f48766",
      "impact": "None\n",
      "name": "Ensure that the scheduler.conf file ownership is set to root:root (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The `scheduler.conf` file is the kubeconfig file for the Scheduler. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubeadm/](https://kubernetes.io/docs/admin/kubeadm/)\n",
      "rego_rule_id": "cis_1_1_16",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchown root:root /etc/kubernetes/scheduler.conf\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.16",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b69-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMTQsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Review pod and service account objects in the cluster and ensure that the\noption below is\nset, unless the resource explicitly requires this access.\n```\nautomountServiceAccountToken: false\n```\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, all pods get a service account token mounted in them.\n",
      "description": "Service accounts tokens should not be mounted in pods except where the workload running in the pod explicitly needs to communicate with the API server\n",
      "id": "7037cf42-1f9b-5064-afde-e74a69cf96eb",
      "impact": "Pods mounted without service account tokens will not be able to communicate with the API server, except where the resource is available to unauthenticated principals.\n",
      "name": "Ensure that Service Account Tokens are only mounted where necessary (Manual)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Mounting service account tokens inside pods can provide an avenue for privilege escalation attacks where an attacker is able to compromise a single pod in the cluster. Avoiding mounting these tokens removes this attack avenue.\n",
      "references": "1. [https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/)\n",
      "rego_rule_id": "cis_5_1_6",
      "remediation": "Modify the definition of pods and service accounts which do not need to mount service account tokens to disable it.\n",
      "section": "RBAC and Service Accounts",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 5.1.6",
        "RBAC and Service Accounts"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b6a-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMTUsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the etcd server node:\n```\nps -ef | grep etcd\n```\nVerify that the `--peer-cert-file` and `--peer-key-file` arguments are set as appropriate.\n**Note:** This recommendation is applicable only for etcd clusters. If you are using only one\netcd server in your environment then this recommendation is not applicable.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "**Note:** This recommendation is applicable only for etcd clusters. If you\nare using only one etcd server in your environment then this recommendation\nis not applicable. By default, peer communication over TLS is not\nconfigured.\n",
      "description": "etcd should be configured to make use of TLS encryption for peer connections.\n",
      "id": "7295eff3-3d9d-5032-8552-bcce9cba8a26",
      "impact": "etcd cluster peers would need to set up TLS for their communication.\n",
      "name": "Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be encrypted in transit and also amongst peers in the etcd clusters.\n",
      "references": "1. [https://coreos.com/etcd/docs/latest/op-guide/security.html](https://coreos.com/etcd/docs/latest/op-guide/security.html)\n2. [https://kubernetes.io/docs/admin/etcd/](https://kubernetes.io/docs/admin/etcd/)\n",
      "rego_rule_id": "cis_2_4",
      "remediation": "Follow the etcd service documentation and configure peer TLS encryption as\nappropriate\nfor your etcd cluster.\nThen, edit the etcd pod specification file `/etc/kubernetes/manifests/etcd.yaml` on the\ncontrol plane node and set the below parameters.\n```\n--peer-client-file=</path/to/peer-cert-file>\n--peer-key-file=</path/to/peer-key-file>\n```\n",
      "section": "etcd",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 2.4",
        "etcd"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b6b-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMTYsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Automated AAC auditing has been modified to allow CIS-CAT to input a variable for the / of\nthe kubelet config file.\nPlease set $kubelet_config= based on the file location on your system\nfor example:\n`export kubelet_config=/etc/kubernetes/kubelet.conf`\nTo perform the audit manually:\nRun the below command (based on the file location on your system) on the each worker\nnode. For example, ``` stat -c %U %G /etc/kubernetes/kubelet.conf ``` Verify that the ownership is set to `root:root`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `kubelet.conf` file ownership is set to `root:root`.\n",
      "description": "Ensure that the kubelet.conf file ownership is set to root:root.\n",
      "id": "743de18a-f988-55e3-b6a9-0b692d1e25fb",
      "impact": "None\n",
      "name": "Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root (Automated)",
      "profile_applicability": "• Level 1 - Worker Node\n",
      "rationale": "The kubelet.conf file is the kubeconfig file for the node, and controls various parameters\nthat set the behavior and identity of the worker node. You should set its file ownership to\nmaintain the integrity of the file. The file should be owned by root:root.\n",
      "references": "1. https://kubernetes.io/docs/admin/kubelet/\n",
      "rego_rule_id": "cis_4_1_6",
      "remediation": "Run the below command (based on the file location on your system) on the\neach worker node. For example, ``` chown root:root /etc/kubernetes/kubelet.conf ```\n",
      "section": "Worker Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.1.6",
        "Worker Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b6c-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMTcsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "List the policies in use for each namespace in the cluster, ensure that policies are present \nwhich prevent `allowedCapabilities` to be set to anything other than an empty array.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, there are no restrictions on adding capabilities to containers.\n",
      "description": "Do not generally permit containers with capabilities assigned beyond the default set.\n",
      "id": "74a82a38-4266-59f0-9ed0-39ef03bc72d1",
      "impact": "Pods with containers which require capabilities outwith the default set will not be permitted.\n",
      "name": "Minimize the admission of containers with added capabilities (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Containers run with a default set of capabilities as assigned by the Container Runtime. Capabilities outside this set can be added to containers which could expose them to risks of container breakout attacks. There should be at least one policy defined which prevents containers with capabilities beyond the default set from launching. If you need to run containers with additional capabilities, this should be defined in a separate policy and you should carefully check to ensure that only limited service accounts and users are given permission to use that policy.\n",
      "references": "1. [https://kubernetes.io/docs/concepts/security/pod-security-standards/](https://kubernetes.io/docs/concepts/security/pod-security-standards/)\n2. [https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/](https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/)\n",
      "rego_rule_id": "cis_5_2_9",
      "remediation": "Ensure that `allowedCapabilities` is not present in policies for the cluster\nunless\nit is set to an\nempty array.\n",
      "section": "Pod Security Standards",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 5.2.9",
        "Pod Security Standards"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b6d-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMTgsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command (based on the file location on your system) on the control plane node.\nFor example,\n```\nstat -c %a /etc/kubernetes/controller-manager.conf\n```\nVerify that the permissions are `644` or more restrictive.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `controller-manager.conf` has permissions of `640`.\n",
      "description": "Ensure that the `controller-manager.conf` file has permissions of `644` or more restrictive.\n",
      "id": "772a42c5-4652-5610-858d-01ef23bd6290",
      "impact": "None\n",
      "name": "Ensure that the controller-manager.conf file permissions are set to 644 or more restrictive (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The `controller-manager.conf` file is the kubeconfig file for the Controller Manager. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-controller-manager/](https://kubernetes.io/docs/admin/kube-controller-manager/)\n",
      "rego_rule_id": "cis_1_1_17",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchmod 644 /etc/kubernetes/controller-manager.conf\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.17",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b6e-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMTksMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nls -laR /etc/kubernetes/pki/\n```\nVerify that the ownership of all files and directories in this hierarchy is set to `root:root`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, the `/etc/kubernetes/pki/` directory and all of the files and directories contained within it, are set to be owned by the root user.\n",
      "description": "Ensure that the Kubernetes PKI directory and file ownership is set to `root:root`.\n",
      "id": "780ac02f-e0f5-537c-98ba-354ae5873a81",
      "impact": "None\n",
      "name": "Ensure that the Kubernetes PKI directory and file ownership is set to root:root (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Kubernetes makes use of a number of certificates as part of its operation. You should set the ownership of the directory containing the PKI information and all files in that directory to maintain their integrity. The directory and files should be owned by root:root.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n",
      "rego_rule_id": "cis_1_1_19",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchown -R root:root /etc/kubernetes/pki/\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.19",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b6f-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMjAsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--authorization-mode` argument exists and is not set to `AlwaysAllow`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `AlwaysAllow` is not enabled.\n",
      "description": "Do not always authorize all requests.\n",
      "id": "811f3dd3-7fbc-5141-83b7-724730ec158d",
      "impact": "Only authorized requests will be served.\n",
      "name": "Ensure that the --authorization-mode argument is not set to AlwaysAllow (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The API Server, can be configured to allow all requests. This mode should not be used on any production cluster.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://kubernetes.io/docs/admin/authorization/](https://kubernetes.io/docs/admin/authorization/)\n",
      "rego_rule_id": "cis_1_2_7",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and set the `--authorization-mode` parameter to\nvalues other than `AlwaysAllow`. One such example could be as below.\n```\n--authorization-mode=RBAC\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.7",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b70-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMjEsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nstat -c %U:%G /etc/kubernetes/manifests/kube-scheduler.yaml\n```\nVerify that the ownership is set to `root:root`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `kube-scheduler.yaml` file ownership is set to `root:root`.\n",
      "description": "Ensure that the scheduler pod specification file ownership is set to `root:root`.\n",
      "id": "81a89547-86b3-5538-a6c4-c33aae82a8ae",
      "impact": "None\n",
      "name": "Ensure that the scheduler pod specification file ownership is set to root:root (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The scheduler pod specification file controls various parameters that set the behavior of the `kube-scheduler` service in the control plane node. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-scheduler/](https://kubernetes.io/docs/admin/kube-scheduler/)\n",
      "rego_rule_id": "cis_1_1_6",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchown root:root /etc/kubernetes/manifests/kube-scheduler.yaml\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.6",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b71-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMjIsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-controller-manager\n```\nVerify that the `--root-ca-file` argument exists and is set to a certificate bundle file\ncontaining the root certificate for the API server's serving certificate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--root-ca-file` is not set.\n",
      "description": "Allow pods to verify the API server's serving certificate before establishing connections.\n",
      "id": "81efecae-af9e-5630-9ef0-1947aa17e376",
      "impact": "You need to setup and maintain root certificate authority file.\n",
      "name": "Ensure that the --root-ca-file argument is set as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Processes running within pods that need to contact the API server must verify the API server's serving certificate. Failing to do so could be a subject to man-in-the-middle attacks. Providing the root certificate for the API server's serving certificate to the controller manager with the `--root-ca-file` argument allows the controller manager to inject the trusted bundle into pods so that they can verify TLS connections to the API server.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-controller-manager/](https://kubernetes.io/docs/admin/kube-controller-manager/)\n2. [https://github.com/kubernetes/kubernetes/issues/11000](https://github.com/kubernetes/kubernetes/issues/11000)\n",
      "rego_rule_id": "cis_1_3_5",
      "remediation": "Edit the Controller Manager pod specification file\n`/etc/kubernetes/manifests/kube-controller-manager.yaml` \non the control plane node and set the `--root-ca-file` parameter to\nthe certificate bundle file.\n```\n--root-ca-file=<path/to/file>\n```\n",
      "section": "Controller Manager",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.3.5",
        "Controller Manager"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b72-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMjMsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Automated AAC auditing has been modified to allow CIS-CAT to input a\nvariable\nfor the / of\nthe kubelet service config file.\nPlease set $kubelet_service_config= based on the file location on your system\nfor example:\n```\nexport kubelet_service_config=/etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n```\nTo perform the audit manually:\nRun the below command (based on the file location on your system) on the each worker\nnode. For example,\n```\nstat -c %a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n```\nVerify that the ownership is set to `root:root`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `kubelet` service file ownership is set to `root:root`.\n",
      "description": "Ensure that the `kubelet` service file ownership is set to `root:root`.\n",
      "id": "827e1022-2702-55c4-aa65-3315517bb6c0",
      "impact": "None\n",
      "name": "Ensure that the kubelet service file ownership is set to root:root (Automated)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "The `kubelet` service file controls various parameters that set the behavior of the `kubelet` service in the worker node. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubelet/](https://kubernetes.io/docs/admin/kubelet/)\n2. [https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#44-joining-your-nodes](https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#44-joining-your-nodes)\n3. [https://kubernetes.io/docs/admin/kubeadm/#kubelet-drop-in](https://kubernetes.io/docs/admin/kubeadm/#kubelet-drop-in)\n",
      "rego_rule_id": "cis_4_1_2",
      "remediation": "Run the below command (based on the file location on your system) on the\neach\nworker\nnode. For example,\n```\nchown root:root /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n```\n",
      "section": "Worker Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.1.2",
        "Worker Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b73-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMjQsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "List the policies in use for each namespace in the cluster, ensure that each policy disallows \nthe admission of `hostPID` containers\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, PodSecurityPolicies are not defined.\n",
      "description": "Do not generally permit containers to be run with the `hostPID` flag set to true.\n",
      "id": "8371e3cb-c8a3-5b4c-876a-3c68b995d30b",
      "impact": "Pods defined with `spec.hostPID: true` will not be permitted unless they are run under a specific policy.\n",
      "name": "Minimize the admission of containers wishing to share the host process ID namespace (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "A container running in the host's PID namespace can inspect processes running outside the container. If the container also has access to ptrace capabilities this can be used to escalate privileges outside of the container. There should be at least one admission control policy defined which does not permit containers to share the host PID namespace. If you need to run containers which require hostPID, this should be defined in a separate policy and you should carefully check to ensure that only limited service accounts and users are given permission to use that policy.\n",
      "references": "1. [https://kubernetes.io/docs/concepts/security/pod-security-standards/](https://kubernetes.io/docs/concepts/security/pod-security-standards/)\n",
      "rego_rule_id": "cis_5_2_3",
      "remediation": "Add policies to each namespace in the cluster which has user workloads to restrict the \nadmission of `hostPID` containers.\n",
      "section": "Pod Security Standards",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 5.2.3",
        "Pod Security Standards"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b74-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMjUsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--audit-log-maxbackup` argument is set to `10` or as appropriate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, auditing is not enabled.\n",
      "description": "Retain 10 or an appropriate number of old log files.\n",
      "id": "861cb7eb-4db7-58c2-b849-19c2437c97f2",
      "impact": "None\n",
      "name": "Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Kubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. For example, if you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://kubernetes.io/docs/concepts/cluster-administration/audit/](https://kubernetes.io/docs/concepts/cluster-administration/audit/)\n3. [https://github.com/kubernetes/features/issues/22](https://github.com/kubernetes/features/issues/22)\n",
      "rego_rule_id": "cis_1_2_21",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and set the `--audit-log-maxbackup` parameter to 10\nor to an appropriate value.\n```\n--audit-log-maxbackup=10\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.21",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b75-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMjYsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--kubelet-https` argument either does not exist or is set to `true`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, kubelet connections are over https.\n",
      "description": "Use https for kubelet connections.\n",
      "id": "8832517d-74ba-5191-8b2b-3bbc81f6f970",
      "impact": "You require TLS to be configured on apiserver as well as kubelets.\n",
      "name": "Ensure that the --kubelet-https argument is set to true (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Connections from apiserver to kubelets could potentially carry sensitive data such as secrets and keys. It is thus important to use in-transit encryption for any communication between the apiserver and kubelets.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://kubernetes.io/docs/admin/kubelet-authentication-authorization/](https://kubernetes.io/docs/admin/kubelet-authentication-authorization/)\n",
      "rego_rule_id": "cis_1_2_4",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and remove the `--kubelet-https` parameter.\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.4",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b76-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMjcsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Retrieve the roles defined across each namespaces in the cluster and review\nfor wildcards\n```\nkubectl get roles --all-namespaces -o yaml\n```\nRetrieve the cluster roles defined in the cluster and review for wildcards\n```\nkubectl get clusterroles -o yaml\n```\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "description": "Kubernetes Roles and ClusterRoles provide access to resources based on sets of objects and actions that can be taken on those objects. It is possible to set either of these to be the wildcard \"*\" which matches all items. Use of wildcards is not optimal from a security perspective as it may allow for inadvertent access to be granted when new resources are added to the Kubernetes API either as CRDs or in later versions of the product.\n",
      "id": "8c46796a-9b8d-585b-8c01-48cde4eff2ec",
      "impact": "None.\n",
      "name": "Minimize wildcard use in Roles and ClusterRoles (Manual)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "The principle of least privilege recommends that users are provided only the access required for their role and nothing more. The use of wildcard rights grants is likely to provide excessive rights to the Kubernetes API.\n",
      "rego_rule_id": "cis_5_1_3",
      "remediation": "Where possible replace any use of wildcards in clusterroles and roles with specific objects or actions.\n",
      "section": "RBAC and Service Accounts",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 5.1.3",
        "RBAC and Service Accounts"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b77-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMjgsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on each node:\n```\nps -ef | grep kubelet\n```\nReview the value set for the `--event-qps` argument and determine whether this has been\nset to an appropriate level for the cluster. The value of `0` can be used to ensure that all\nevents are captured.\nIf the `--event-qps` argument does not exist, check that there is a Kubelet config file\nspecified by `--config` and review the value in this location.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--event-qps` argument is set to `5`.\n",
      "description": "Security relevant information should be captured. \nThe `--event-qps` flag on the Kubelet can be used to limit the rate at which events are gathered.\nSetting this too low could result in relevant events not being logged, however the unlimited setting of `0` could result in a denial\nof service on the kubelet.\n",
      "id": "8dad2026-5cfd-5398-ba90-9c329ae6b2ca",
      "impact": "Setting this parameter to `0` could result in a denial of service condition due to excessive\nevents being created. The cluster's event processing and storage systems should be scaled\nto handle expected event loads.\n",
      "name": "Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture (Manual)",
      "profile_applicability": "* Level 2 - Worker Node\n",
      "rationale": "It is important to capture all events and not restrict event creation. \nEvents are an important source of security information and analytics that ensure that your environment is\nconsistently monitored using the event data.\n",
      "references": "1. https://kubernetes.io/docs/admin/kubelet/\n2. https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/apis/kubeletconfig/v1beta1/types.go\n",
      "rego_rule_id": "cis_4_2_9",
      "remediation": "If using a Kubelet config file, edit the file to set `eventRecordQPS:` to an appropriate level.\nIf using command line arguments, edit the kubelet service file\n`/etc/systemd/system/kubelet.service.d/10-kubeadm.conf` on each worker node and\nset the below parameter in `KUBELET_SYSTEM_PODS_ARGS` variable.\nBased on your system, restart the `kubelet` service. \nFor example:\n```\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n```\n",
      "section": "Kubelet",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.2.9",
        "Kubelet"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b78-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMjksMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Automated AAC auditing has been modified to allow CIS-CAT to input a\nvariable\nfor the / of\nthe kubelet service config file.\nPlease set $kubelet_service_config= based on the file location on your system\nfor example:\n```\nexport kubelet_service_config=/etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n```\nTo perform the audit manually:\nRun the below command (based on the file location on your system) on the each worker\nnode. For example,\n```\nstat -c %a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n```\nVerify that the permissions are `644` or more restrictive.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, the `kubelet` service file has permissions of `640`.\n",
      "description": "Ensure that the `kubelet` service file has permissions of `644` or more restrictive.\n",
      "id": "9144ba59-0a3e-59fb-b96e-e3f73e7aaf66",
      "impact": "None\n",
      "name": "Ensure that the kubelet service file permissions are set to 644 or more restrictive (Automated)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "The `kubelet` service file controls various parameters that set the behavior of the `kubelet` service in the worker node. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubelet/](https://kubernetes.io/docs/admin/kubelet/)\n2. [https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#44-joining-your-nodes](https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/#44-joining-your-nodes)\n3. [https://kubernetes.io/docs/admin/kubeadm/#kubelet-drop-in](https://kubernetes.io/docs/admin/kubeadm/#kubelet-drop-in)\n",
      "rego_rule_id": "cis_4_1_1",
      "remediation": "Run the below command (based on the file location on your system) on the\neach\nworker\nnode. For example,\n```\nchmod 755 /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n```\n",
      "section": "Worker Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.1.1",
        "Worker Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b79-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMzAsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the Control Plane node: ``` ps -ef | grep kube-apiserver ``` Verify that the `--enable-admission-plugins` argument is set to a value that includes\n`AlwaysPullImages`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, AlwaysPullImages is not set.\n",
      "description": "Always pull images.\n",
      "id": "95868b0f-4f1a-5af1-846e-93725abc9c18",
      "impact": "Credentials would be required to pull the private images every time. Also, in trusted\nenvironments, this might increases load on network, registry, and decreases speed.\nThis setting could impact offline or isolated clusters, which have images pre-loaded and do\nnot have access to a registry to pull in-use images. This setting is not appropriate for\nclusters which use this configuration.\n",
      "name": "Ensure that the admission control plugin AlwaysPullImages is set(Manual)",
      "profile_applicability": "• Level 1 - Master Node\n",
      "rationale": "Setting admission control policy to AlwaysPullImages forces every new pod to\npull the required images every time. In a multi-tenant cluster users can be assured that their\nprivate images can only be used by those who have the credentials to pull them. \nWithout this admission control policy, once an image has been pulled to a node, any pod from any\nuser can use it simply by knowing the image’s name, without any authorization check\nagainst the image ownership. When this plug-in is enabled, images are always pulled prior\nto starting containers, which means valid credentials are required.\n",
      "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/\n2. https://kubernetes.io/docs/admin/admission-controllers/#alwayspullimages\n",
      "rego_rule_id": "cis_1_2_12",
      "remediation": "Edit the API server pod specification file `/etc/kubernetes/manifests/kube-apiserver.yaml \non the Control Plane node and set the `--enable-admission-plugins` parameter to include `AlwaysPullImages`. ``` --enable-admission-plugins=...,AlwaysPullImages,... ```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.12",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b7a-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMzEsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--kubelet-certificate-authority` argument exists and is set as\nappropriate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--kubelet-certificate-authority` argument is not set.\n",
      "description": "Verify kubelet's certificate before establishing connection.\n",
      "id": "9a584e20-2a45-598e-b7ee-1148740f3085",
      "impact": "You require TLS to be configured on apiserver as well as kubelets.\n",
      "name": "Ensure that the --kubelet-certificate-authority argument is set as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://kubernetes.io/docs/admin/kubelet-authentication-authorization/](https://kubernetes.io/docs/admin/kubelet-authentication-authorization/)\n3. [https://kubernetes.io/docs/concepts/cluster-administration/master-node-communication/#apiserver---kubelet](https://kubernetes.io/docs/concepts/cluster-administration/master-node-communication/#apiserver---kubelet)\n",
      "rego_rule_id": "cis_1_2_6",
      "remediation": "Follow the Kubernetes documentation and setup the TLS connection between the\napiserver\nand kubelets. Then, edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` on the control plane node and set the \n`--kubelet-certificate-authority` parameter to the path to the cert file for the certificate\nauthority.\n```\n--kubelet-certificate-authority=<ca-string>\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.6",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b7b-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMzIsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the Control Plane node:\n  \n``` ps -ef | grep kube-apiserver ```\nVerify that the `--enable-admission-plugins` argument is set to a value that includes\n`SecurityContextDeny`, if `PodSecurityPolicy` is not included.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `SecurityContextDeny` is not set.\n",
      "description": "The `SecurityContextDeny` admission controller can be used to deny pods which make use of\nsome SecurityContext fields which could allow for privilege escalation in the cluster. \nThis should be used where PodSecurityPolicy is not in place within the cluster.\n",
      "id": "9ad692c7-e8ee-5633-ac83-d7911467c2c0",
      "impact": "This admission controller should only be used where Pod Security Policies cannot be used\non the cluster, as it can interact poorly with certain Pod Security Policies\n",
      "name": "Ensure that the admission control plugin SecurityContextDeny is set if PodSecurityPolicy is not used (Manual)",
      "profile_applicability": "• Level 1 - Master Node\n",
      "rationale": "`SecurityContextDeny` can be used to provide a layer of security for clusters which do not\nhave PodSecurityPolicies enabled.\n",
      "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/\n2. https://kubernetes.io/docs/admin/admission-controllers/#securitycontextdeny\n3. https://kubernetes.io/docs/user-guide/pod-security-policy/#working-with-rbac\n",
      "rego_rule_id": "cis_1_2_13",
      "remediation": "Edit the API server pod specification file `/etc/kubernetes/manifests/kube-apiserver.yaml` \non the Control Plane node and set the `--enable-admission-plugins` parameter to include `SecurityContextDeny`, \nunless `PodSecurityPolicy` is already in place.\n`--enable-admission-plugins=...,SecurityContextDeny,...`\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.13",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b7c-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMzMsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--etcd-certfile` and `--etcd-keyfile` arguments exist and they are set as\nappropriate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--etcd-certfile` and `--etcd-keyfile` arguments are not set\n",
      "description": "etcd should be configured to make use of TLS encryption for client connections.\n",
      "id": "9ed65e6a-550a-5960-b86d-ab3449c407c0",
      "impact": "TLS and client certificate authentication must be configured for etcd.\n",
      "name": "Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be protected by client authentication. This requires the API server to identify itself to the etcd server using a client certificate and key.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://coreos.com/etcd/docs/latest/op-guide/security.html](https://coreos.com/etcd/docs/latest/op-guide/security.html)\n",
      "rego_rule_id": "cis_1_2_26",
      "remediation": "Follow the Kubernetes documentation and set up the TLS connection between\nthe\napiserver and etcd. Then, edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` on the control plane node and set the etcd\ncertificate and key file parameters.\n```\n--etcd-certfile=<path/to/client-certificate-file>\n--etcd-keyfile=<path/to/client-key-file>\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.26",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b7d-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMzQsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "If using a Kubelet configuration file, check that there is an entry for\n`authentication: anonymous: enabled` set to `false`.\nRun the following command on each node:\n```\nps -ef | grep kubelet\n```\nVerify that the `--anonymous-auth` argument is set to `false`.\nThis executable argument may be omitted, provided there is a corresponding entry set to\n`false` in the Kubelet config file.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, anonymous access is enabled.\n",
      "description": "Disable anonymous requests to the Kubelet server.\n",
      "id": "a082f4e6-67d7-56c4-9764-42db2030a552",
      "impact": "Anonymous requests will be rejected.\n",
      "name": "Ensure that the --anonymous-auth argument is set to false (Automated)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "When enabled, requests that are not rejected by other configured authentication methods are treated as anonymous requests. These requests are then served by the Kubelet server. You should rely on authentication to authorize access and disallow anonymous requests.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubelet/](https://kubernetes.io/docs/admin/kubelet/)\n2. [https://kubernetes.io/docs/admin/kubelet-authentication-authorization/#kubelet-authentication](https://kubernetes.io/docs/admin/kubelet-authentication-authorization/#kubelet-authentication)\n",
      "rego_rule_id": "cis_4_2_1",
      "remediation": "If using a Kubelet config file, edit the file to set `authentication:\nanonymous: enabled` \nto\n`false`.\nIf using executable arguments, edit the kubelet service file\n`/etc/systemd/system/kubelet.service.d/10-kubeadm.conf` on each worker node and\nset the below parameter in `KUBELET_SYSTEM_PODS_ARGS` variable.\n```\n--anonymous-auth=false\n```\nBased on your system, restart the `kubelet` service. For example:\n```\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n```\n",
      "section": "Kubelet",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.2.1",
        "Kubelet"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b7e-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMzUsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on each node:\n```\nps -ef | grep kubelet\n```\nVerify that the `--client-ca-file` argument exists and is set to the location of the client\ncertificate authority file.\nIf the `--client-ca-file` argument is not present, check that there is a Kubelet config file\nspecified by `--config`, and that the file sets `authentication: x509: clientCAFile` to the\nlocation of the client certificate authority file.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--client-ca-file` argument is not set.\n",
      "description": "Enable Kubelet authentication using certificates.\n",
      "id": "a406209b-2765-5d90-91ba-4e872802c450",
      "impact": "You require TLS to be configured on apiserver as well as kubelets.\n",
      "name": "Ensure that the --client-ca-file argument is set as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "The connections from the apiserver to the kubelet are used for fetching logs for pods, attaching (through kubectl) to running pods, and using the kubelet's port-forwarding functionality. These connections terminate at the kubelet's HTTPS endpoint. By default, the apiserver does not verify the kubelet's serving certificate, which makes the connection subject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public networks. Enabling Kubelet certificate authentication ensures that the apiserver could authenticate the Kubelet before submitting any requests.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubelet/](https://kubernetes.io/docs/admin/kubelet/)\n2. [https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-authentication-authorization/](https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-authentication-authorization/)\n",
      "rego_rule_id": "cis_4_2_3",
      "remediation": "If using a Kubelet config file, edit the file to set `authentication:\nx509:clientCAFile` \nto\nthe location of the client CA file.\nIf using command line arguments, edit the kubelet service file\n`/etc/systemd/system/kubelet.service.d/10-kubeadm.conf` on each worker node and\nset the below parameter in `KUBELET_AUTHZ_ARGS` variable.\n```\n--client-ca-file=<path/to/client-ca-file>\n```\nBased on your system, restart the `kubelet` service. For example:\n```\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n```\n",
      "section": "Kubelet",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.2.3",
        "Kubelet"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b7f-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMzYsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the etcd server node:\n```\nps -ef | grep etcd\n```\nVerify that the `--client-cert-auth` argument is set to `true`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, the etcd service can be queried by unauthenticated clients.\n",
      "description": "Enable client authentication on etcd service.\n",
      "id": "a6194f98-6534-5308-9683-1adb4914cc46",
      "impact": "All clients attempting to access the etcd server will require a valid client certificate.\n",
      "name": "Ensure that the --client-cert-auth argument is set to true (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should not be available to unauthenticated clients. You should enable the client authentication via valid certificates to secure the access to the etcd service.\n",
      "references": "1. [https://coreos.com/etcd/docs/latest/op-guide/security.html](https://coreos.com/etcd/docs/latest/op-guide/security.html)\n2. [https://kubernetes.io/docs/admin/etcd/](https://kubernetes.io/docs/admin/etcd/)\n3. [https://coreos.com/etcd/docs/latest/op-guide/configuration.html#client-cert-auth](https://coreos.com/etcd/docs/latest/op-guide/configuration.html#client-cert-auth)\n",
      "rego_rule_id": "cis_2_2",
      "remediation": "Edit the etcd pod specification file `/etc/kubernetes/manifests/etcd.yaml`\non\nthe control plane\nnode and set the below parameter.\n```\n--client-cert-auth=\"true\"\n```\n",
      "section": "etcd",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 2.2",
        "etcd"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b80-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMzcsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-controller-manager\n```\nVerify that `RotateKubeletServerCertificate` argument exists and is set to `true`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `RotateKubeletServerCertificate` is set to \"true\" this recommendation verifies that it has not been disabled.\n",
      "description": "Enable kubelet server certificate rotation on controller-manager.\n",
      "id": "a75f69ac-866e-5fbe-b9ce-b5a2a8c20834",
      "impact": "None\n",
      "name": "Ensure that the RotateKubeletServerCertificate argument is set to true (Automated)",
      "profile_applicability": "* Level 2 - Master Node\n",
      "rationale": "`RotateKubeletServerCertificate` causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad. Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#approval-controller](https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#approval-controller)\n2. [https://github.com/kubernetes/features/issues/267](https://github.com/kubernetes/features/issues/267)\n3. [https://github.com/kubernetes/kubernetes/pull/45059](https://github.com/kubernetes/kubernetes/pull/45059)\n4. [https://kubernetes.io/docs/admin/kube-controller-manager/](https://kubernetes.io/docs/admin/kube-controller-manager/)\n",
      "rego_rule_id": "cis_1_3_6",
      "remediation": "Edit the Controller Manager pod specification file\n`/etc/kubernetes/manifests/kube-controller-manager.yaml` \non the control plane node and set the `--feature-gates` parameter to\ninclude `RotateKubeletServerCertificate=true`.\n```\n--feature-gates=RotateKubeletServerCertificate=true\n```\n",
      "section": "Controller Manager",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.3.6",
        "Controller Manager"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b81-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMzgsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the etcd server node:\n```\nps -ef | grep etcd\n```\nVerify that the `--peer-client-cert-auth` argument is set to `true`.\n**Note:** This recommendation is applicable only for etcd clusters. If you are using only one\netcd server in your environment then this recommendation is not applicable.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "**Note:** This recommendation is applicable only for etcd clusters. If you\nare using only one etcd server in your environment then this recommendation\nis not applicable. By default, `--peer-client-cert-auth` argument is set to\n`false`.\n",
      "description": "etcd should be configured for peer authentication.\n",
      "id": "b26d85f5-ac08-535f-8b5d-8e461a0cf679",
      "impact": "All peers attempting to communicate with the etcd server will require a valid client certificate for authentication.\n",
      "name": "Ensure that the --peer-client-cert-auth argument is set to true (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "etcd is a highly-available key value store used by Kubernetes deployments for persistent storage of all of its REST API objects. These objects are sensitive in nature and should be accessible only by authenticated etcd peers in the etcd cluster.\n",
      "references": "1. [https://coreos.com/etcd/docs/latest/op-guide/security.html](https://coreos.com/etcd/docs/latest/op-guide/security.html)\n2. [https://kubernetes.io/docs/admin/etcd/](https://kubernetes.io/docs/admin/etcd/)\n3. [https://coreos.com/etcd/docs/latest/op-guide/configuration.html#peer-client-cert-auth](https://coreos.com/etcd/docs/latest/op-guide/configuration.html#peer-client-cert-auth)\n",
      "rego_rule_id": "cis_2_5",
      "remediation": "Edit the etcd pod specification file `/etc/kubernetes/manifests/etcd.yaml`\non\nthe control plane\nnode and set the below parameter.\n```\n--peer-client-cert-auth=true\n```\n",
      "section": "etcd",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 2.5",
        "etcd"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b82-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyMzksMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "List the policies in use for each namespace in the cluster, ensure that each policy restricts \nthe use of root containers by setting `MustRunAsNonRoot` or `MustRunAs` with the range of\nUIDs not including 0.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, there are no restrictions on the use of root containers and if a User is not \nspecified in the image, the container will run as root.\n",
      "description": "Do not generally permit containers to be run as the root user.\n",
      "id": "b2d85ce5-e820-580d-98ba-a7e3ac83eeb3",
      "impact": "Pods with containers which run as the root user will not be permitted.\n",
      "name": "Minimize the admission of root containers (Automated)",
      "profile_applicability": "* Level 2 - Master Node\n",
      "rationale": "Containers may run as any Linux user. Containers which run as the root user, whilst constrained by Container Runtime security features still have a escalated likelihood of container breakout. Ideally, all containers should run as a defined non-UID 0 user. There should be at least one admission control policy defined which does not permit root containers. If you need to run root containers, this should be defined in a separate policy and you should carefully check to ensure that only limited service accounts and users are given permission to use that policy.\n",
      "references": "1. [https://kubernetes.io/docs/concepts/security/pod-security-standards/](https://kubernetes.io/docs/concepts/security/pod-security-standards/)\n",
      "rego_rule_id": "cis_5_2_7",
      "remediation": "Create a policy for each namespace in the cluster, ensuring that either `MustRunAsNonRoot` \nor `MustRunAs` with the range of UIDs not including 0, is set.\n",
      "section": "Pod Security Standards",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 5.2.7",
        "Pod Security Standards"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b83-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNDAsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "List the policies in use for each namespace in the cluster, ensure that each policy disallows \nthe admission of containers which allow privilege escalation.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, there are no restrictions on contained process ability to escalate privileges, \nwithin the context of the container.\n",
      "description": "Do not generally permit containers to be run with the `allowPrivilegeEscalation` flag set to true. Allowing this right can lead to a process running a container getting more rights  than it started with.  It's important to note that these rights are still constrained by the overall container  sandbox, and this setting does not relate to the use of privileged containers.\n",
      "id": "bbe88e70-e917-5e9d-8993-3b5dd61a56c9",
      "impact": "Pods defined with `spec.allowPrivilegeEscalation: true` will not be permitted unless they are run under a specific policy.\n",
      "name": "Minimize the admission of containers with allowPrivilegeEscalation (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "A container running with the `allowPrivilegeEscalation` flag set to `true` may have processes that can gain more privileges than their parent. There should be at least one admission control policy defined which does not permit containers to allow privilege escalation. The option exists (and is defaulted to true) to permit setuid binaries to run. If you have need to run containers which use setuid binaries or require privilege escalation, this should be defined in a separate policy and you should carefully check  to ensure that only limited service accounts and users are given permission to use that policy.\n",
      "references": "1. [https://kubernetes.io/docs/concepts/security/pod-security-standards/](https://kubernetes.io/docs/concepts/security/pod-security-standards/)\n",
      "rego_rule_id": "cis_5_2_6",
      "remediation": "Add policies to each namespace in the cluster which has user workloads to restrict the \nadmission of conatiners with `.spec.allowPrivilegeEscalation` set to `true`.\n",
      "section": "Pod Security Standards",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 5.2.6",
        "Pod Security Standards"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b84-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNDEsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--request-timeout` argument is either not set or set to an appropriate\nvalue.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--request-timeout` is set to 60 seconds.\n",
      "description": "Set global request timeout for API server requests as appropriate.\n",
      "id": "c03358d0-05d0-54a9-b079-7c6991b2bc41",
      "impact": "None\n",
      "name": "Ensure that the --request-timeout argument is set as appropriate (Manual)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Setting global request timeout allows extending the API server request timeout limit to a duration appropriate to the user's connection speed. By default, it is set to 60 seconds which might be problematic on slower connections making cluster resources inaccessible once the data volume for requests exceeds what can be transmitted in 60 seconds. But, setting this timeout limit to be too large can exhaust the API server resources making it prone to Denial-of-Service attack. Hence, it is recommended to set this limit as appropriate and change the default limit of 60 seconds only if needed.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://github.com/kubernetes/kubernetes/pull/51415](https://github.com/kubernetes/kubernetes/pull/51415)\n",
      "rego_rule_id": "cis_1_2_23",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` \nand set the below parameter as appropriate and if needed. For example,\n```\n--request-timeout=300s\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.23",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b85-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNDIsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nstat -c %U:%G /etc/kubernetes/manifests/etcd.yaml\n```\nVerify that the ownership is set to `root:root`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `/etc/kubernetes/manifests/etcd.yaml` file ownership is set to `root:root`.\n",
      "description": "Ensure that the `/etc/kubernetes/manifests/etcd.yaml` file ownership is set to `root:root`.\n",
      "id": "c3c56d62-e217-5a77-aba0-124b1dfb3d2c",
      "impact": "None\n",
      "name": "Ensure that the etcd pod specification file ownership is set to root:root (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The etcd pod specification file `/etc/kubernetes/manifests/etcd.yaml` controls various parameters that set the behavior of the `etcd` service in the control plane node. etcd is a highly-available key-value store which Kubernetes uses for persistent storage of all of its REST API object. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`.\n",
      "references": "1. [https://coreos.com/etcd](https://coreos.com/etcd)\n2. [https://kubernetes.io/docs/admin/etcd/](https://kubernetes.io/docs/admin/etcd/)\n",
      "rego_rule_id": "cis_1_1_8",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchown root:root /etc/kubernetes/manifests/etcd.yaml\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.8",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b86-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNDMsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "List the policies in use for each namespace in the cluster, ensure that each policy disallows \nthe admission of privileged containers.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, there are no restrictions on the creation of privileged containers.\n",
      "description": "Do not generally permit containers to be run with the `securityContext.privileged` flag set to `true`.\n",
      "id": "c978fb31-5706-5bdf-93fb-7cb84a35c63c",
      "impact": "Pods defined with `spec.containers[].securityContext.privileged: true`, `spec.initContainers[].securityContext.privileged: true` and  `spec.ephemeralContainers[].securityContext.privileged: true` will not be permitted.\n",
      "name": "Minimize the admission of privileged containers (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Privileged containers have access to all Linux Kernel capabilities and devices. A container running with full privileges can do almost everything that the host can do. This flag exists to allow special use-cases, like manipulating the network stack and accessing devices. There should be at least one admission control policy defined which does not permit privileged containers. If you need to run privileged containers, this should be defined in a separate policy and you should carefully check ensure that only limited service accounts and users are given permission to use that policy.\n",
      "references": "1. [https://kubernetes.io/docs/concepts/security/pod-security-standards/](https://kubernetes.io/docs/concepts/security/pod-security-standards/)\n",
      "rego_rule_id": "cis_5_2_2",
      "remediation": "Add policies to each namespace in the cluster which has user workloads to restrict the \nadmission of privileged containers.\n",
      "section": "Pod Security Standards",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 5.2.2",
        "Pod Security Standards"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b87-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNDQsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "List the policies in use for each namespace in the cluster, ensure that at least one policy \nrequires that capabilities are dropped by all containers.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, there are no restrictions on the creation of containers with additional capabilities\n",
      "description": "Do not generally permit containers with capabilities\n",
      "id": "cfcc0315-7d89-5b9c-ab1a-eaf860e8942f",
      "impact": "Pods with containers require capabilities to operate will not be permitted.\n",
      "name": "Minimize the admission of containers with capabilities assigned (Manual)",
      "profile_applicability": "* Level 2 - Master Node\n",
      "rationale": "Containers run with a default set of capabilities as assigned by the Container Runtime. Capabilities are parts of the rights generally granted on a Linux system to the root user. In many cases applications running in containers do not require any capabilities to operate, so from the perspective of the principal of least privilege use of capabilities should be minimized.\n",
      "references": "1. https://kubernetes.io/docs/concepts/security/pod-security-standards/\n2. https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-\nunprivileged-linux-containers/\n",
      "rego_rule_id": "cis_5_2_10",
      "remediation": "Review the use of capabilites in applications runnning on your cluster.\nWhere\na namespace\ncontains applicaions which do not require any Linux capabities to operate consider adding\na policy which forbids the admission of containers which do not drop all capabilities.\n",
      "section": "Pod Security Standards",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 5.2.10",
        "Pod Security Standards"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b88-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNDUsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the Control Plane node: ``` ps -ef | grep kube-apiserver ``` Verify that the `--enable-admission-plugins` argument is set to a value that includes `EventRateLimit`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `EventRateLimit` is not set.\n",
      "description": "Limit the rate at which the API server accepts requests.\n",
      "id": "d44fc5e7-7275-5d07-88a7-f1f8fc2f73c2",
      "impact": "You need to carefully tune in limits as per your environment.\n",
      "name": "Ensure that the admission control plugin EventRateLimit is set (Manual)",
      "profile_applicability": "• Level 1 - Master Node\n",
      "rationale": "Using `EventRateLimit` admission control enforces a limit on the number of events that the\nAPI Server will accept in a given time slice. A misbehaving workload could overwhelm and\nDoS the API Server, making it unavailable. This particularly applies to a multi-tenant\ncluster, where there might be a small percentage of misbehaving tenants which could have\na significant impact on the performance of the cluster overall. Hence, it is recommended to\nlimit the rate of events that the API server will accept.\nNote: This is an Alpha feature in the Kubernetes 1.15 release.\n",
      "references": "1. https://kubernetes.io/docs/admin/kube-apiserver/\n2. https://kubernetes.io/docs/admin/admission-controllers/#eventratelimit\n3. https://github.com/staebler/community/blob/9873b632f4d99b5d99c38c9b15fe2f\n8b93d0a746/contributors/design-\nproposals/admission_control_event_rate_limit.md\n",
      "rego_rule_id": "cis_1_2_10",
      "remediation": "Follow the Kubernetes documentation and set the desired limits in a configuration file.\nThen, edit the API server pod specification file `/etc/kubernetes/manifests/kube-apiserver.yaml` \nand set the below parameters. ``` --enable-admission-plugins=...,EventRateLimit,...\n--admission-control-config-file=<path/to/configuration/file> ```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.10",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b89-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNDYsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--authorization-mode` argument exists and is set to a value to include `Node`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `Node` authorization is not enabled.\n",
      "description": "Restrict kubelet nodes to reading only objects associated with them.\n",
      "id": "d4942f42-b0b7-5fab-9d43-bfcf3373ac57",
      "impact": "None\n",
      "name": "Ensure that the --authorization-mode argument includes Node (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The `Node` authorization mode only allows kubelets to read `Secret`, `ConfigMap`, `PersistentVolume`, and `PersistentVolumeClaim` objects associated with their nodes.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://kubernetes.io/docs/admin/authorization/node/](https://kubernetes.io/docs/admin/authorization/node/)\n3. [https://github.com/kubernetes/kubernetes/pull/46076](https://github.com/kubernetes/kubernetes/pull/46076)\n4. [https://acotten.com/post/kube17-security](https://acotten.com/post/kube17-security)\n",
      "rego_rule_id": "cis_1_2_8",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and set the `--authorization-mode` parameter to a\nvalue that includes `Node`.\n```\n--authorization-mode=Node,RBAC\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.8",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b8a-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNDcsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that if the `--enable-admission-plugins` argument is set, its value does not include\n`AlwaysAdmit`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "`AlwaysAdmit` is not in the list of default admission plugins.\n",
      "description": "Do not allow all requests.\n",
      "id": "d8682dfd-f8ab-5f9f-b10f-6225b9b46560",
      "impact": "Only requests explicitly allowed by the admissions control plugins would be served.\n",
      "name": "Ensure that the admission control plugin AlwaysAdmit is not set (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Setting admission control plugin `AlwaysAdmit` allows all requests and do not filter any requests. The `AlwaysAdmit` admission controller was deprecated in Kubernetes v1.13. Its behavior was equivalent to turning off all admission controllers.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://kubernetes.io/docs/admin/admission-controllers/#alwaysadmit](https://kubernetes.io/docs/admin/admission-controllers/#alwaysadmit)\n",
      "rego_rule_id": "cis_1_2_11",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml`\non the control plane node and either remove the `--enable-admission-plugins`\nparameter, or set it to a value that does not include `AlwaysAdmit`.\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.11",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b8b-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNDgsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on each node:\n```\nps -ef | grep kubelet\n```\nVerify that the `--rotate-certificates` argument is not present, or is set to `true`.\nIf the `--rotate-certificates` argument is not present, verify that if there is a Kubelet\nconfig file specified by `--config`, that file does not contain `rotateCertificates: false`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, kubelet client certificate rotation is enabled.\n",
      "description": "Enable kubelet client certificate rotation.\n",
      "id": "d94918af-be06-5d3c-b880-6d9d0f23a1e7",
      "impact": "None\n",
      "name": "Ensure that the --rotate-certificates argument is not set to false (Manual)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "The `--rotate-certificates` setting causes the kubelet to rotate its client certificates by creating new CSRs as its existing credentials expire.  This automated periodic rotation ensures that the there is no downtime due to expired certificates and thus addressing availability in the CIA security triad. Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself. Note: This feature also require the `RotateKubeletClientCertificate` feature gate to be enabled (which is the default since Kubernetes v1.7)\n",
      "references": "1. [https://github.com/kubernetes/kubernetes/pull/41912](https://github.com/kubernetes/kubernetes/pull/41912)\n2. [https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-tls-bootstrapping/#kubelet-configuration](https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet-tls-bootstrapping/#kubelet-configuration)\n3. [https://kubernetes.io/docs/imported/release/notes/](https://kubernetes.io/docs/imported/release/notes/)\n4. [https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/)\n",
      "rego_rule_id": "cis_4_2_11",
      "remediation": "If using a Kubelet config file, edit the file to add the line\n`rotateCertificates: true` or\nremove it altogether to use the default value.\nIf using command line arguments, edit the kubelet service file\n`/etc/systemd/system/kubelet.service.d/10-kubeadm.conf` on each worker node and\nremove `--rotate-certificates=false` argument from the `KUBELET_CERTIFICATE_ARGS`\nvariable.\nBased on your system, restart the kubelet service. For example:\n```\nsystemctl daemon-reload\n\nsystemctl restart kubelet.service\n```\n",
      "section": "Kubelet",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.2.11",
        "Kubelet"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b8c-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNDksMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on each node:\n```\nps -ef | grep kubelet\n```\nVerify that the `--streaming-connection-idle-timeout` argument is not set to `0`.\nIf the argument is not present, and there is a Kubelet config file specified by `--config`,\n\ncheck that it does not set `streamingConnectionIdleTimeout` to `0`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--streaming-connection-idle-timeout` is set to 4 hours.\n",
      "description": "Do not disable timeouts on streaming connections.\n",
      "id": "db3446ed-5542-59b0-a9e3-499814d5bde3",
      "impact": "Long-lived connections could be interrupted.\n",
      "name": "Ensure that the --streaming-connection-idle-timeout argument is not set to 0 (Manual)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "Setting idle timeouts ensures that you are protected against Denial-of-Service attacks, inactive connections and running out of ephemeral ports. Note: By default, `--streaming-connection-idle-timeout` is set to 4 hours which might be too high for your environment. Setting this as appropriate would additionally ensure that such streaming connections are timed out after serving legitimate use cases.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubelet/](https://kubernetes.io/docs/admin/kubelet/)\n2. [https://github.com/kubernetes/kubernetes/pull/18552](https://github.com/kubernetes/kubernetes/pull/18552)\n",
      "rego_rule_id": "cis_4_2_5",
      "remediation": "If using a Kubelet config file, edit the file to set\n`streamingConnectionIdleTimeout` to a value other than `0`.\nIf using command line arguments, edit the kubelet service file\n`/etc/systemd/system/kubelet.service.d/10-kubeadm.conf` on each worker node and\n\nset the below parameter in `KUBELET_SYSTEM_PODS_ARGS` variable.\n```\n--streaming-connection-idle-timeout=5m\n```\nBased on your system, restart the kubelet service. For example:\n```\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n```\n",
      "section": "Kubelet",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.2.5",
        "Kubelet"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b8d-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNTAsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on each node:\n```\nps -ef | grep kubelet\n```\nVerify that the `--tls-cert-file` and `--tls-private-key-file` arguments exist and they are set as\nappropriate.\nIf these arguments are not present, check that there is a Kubelet config specified by `--config`\nand that it contains appropriate settings for tlsCertFile and tlsPrivateKeyFile.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "description": "Setup TLS connection on the Kubelets.\n",
      "id": "dc91f4c4-4f0e-59ba-a0e1-96e996736787",
      "name": "Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate (Manual)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "The connections from the apiserver to the kubelet are used for fetching logs for pods,\nattaching (through kubectl) to running pods, and using the kubelet’s port-forwarding\nfunctionality. These connections terminate at the kubelet’s HTTPS endpoint. By default, the\napiserver does not verify the kubelet’s serving certificate, which makes the connection\nsubject to man-in-the-middle attacks, and unsafe to run over untrusted and/or public\nnetworks.\n",
      "rego_rule_id": "cis_4_2_10",
      "remediation": "If using a Kubelet config file, edit the file to set tlsCertFile to the location of the certificate\nfile to use to identify this Kubelet, and tlsPrivateKeyFile to the location of the\ncorresponding private key file.\nIf using command line arguments, edit the kubelet service file\n`/etc/systemd/system/kubelet.service.d/10-kubeadm.conf` on each worker node and set\nthe below parameters in KUBELET_CERTIFICATE_ARGS variable.\n--tls-cert-file=<path/to/tls-certificate-file> --tls-private-key-file=<path/to/tls-key-file>\nBased on your system, restart the kubelet service. For example:\n```\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n```\n",
      "section": "Kubelet",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.2.10",
        "Kubelet"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b8e-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNTEsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on each node:\n```\nps -ef | grep kubelet\n```\nVerify that if the `--make-iptables-util-chains` argument exists then it is set to `true`.\nIf the `--make-iptables-util-chains` argument does not exist, and there is a Kubelet config\nfile specified by `--config`, verify that the file does not set `makeIPTablesUtilChains` to\n`false`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--make-iptables-util-chains` argument is set to `true`.\n",
      "description": "Allow Kubelet to manage iptables.\n",
      "id": "ddf0a2b1-5b54-5960-a749-89f351dcc04b",
      "impact": "Kubelet would manage the iptables on the system and keep it in sync. If you are using any other iptables management solution, then there might be some conflicts.\n",
      "name": "Ensure that the --make-iptables-util-chains argument is set to true (Automated)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "Kubelets can automatically manage the required changes to iptables based on how you choose your networking options for the pods. It is recommended to let kubelets manage the changes to iptables. This ensures that the iptables configuration remains in sync with pods networking configuration. Manually configuring iptables with dynamic pod network configuration changes might hamper the communication between pods/containers and to the outside world. You might have iptables rules too restrictive or too open.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kubelet/](https://kubernetes.io/docs/admin/kubelet/)\n",
      "rego_rule_id": "cis_4_2_7",
      "remediation": "If using a Kubelet config file, edit the file to set\n`makeIPTablesUtilChains: true`.\nIf using command line arguments, edit the kubelet service file\n`/etc/systemd/system/kubelet.service.d/10-kubeadm.conf` on each worker node and\nremove the `--make-iptables-util-chains` argument from the\n`KUBELET_SYSTEM_PODS_ARGS` variable.\nBased on your system, restart the `kubelet` service. For example:\n```\nsystemctl daemon-reload\nsystemctl restart kubelet.service\n```\n",
      "section": "Kubelet",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.2.7",
        "Kubelet"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b8f-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNTIsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--secure-port` argument is either not set or is set to an integer value\nbetween 1 and 65535.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, port 6443 is used as the secure port.\n",
      "description": "Do not disable the secure port.\n",
      "id": "e14db7eb-4c21-5f97-826a-391266a92ced",
      "impact": "You need to set the API Server up with the right TLS certificates.\n",
      "name": "Ensure that the --secure-port argument is not set to 0 (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The secure port is used to serve https with authentication and authorization. If you disable it, no https traffic is served and all traffic is served unencrypted.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n",
      "rego_rule_id": "cis_1_2_17",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and either remove the `--secure-port` parameter or\nset it to a different (non-zero) desired port.\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.17",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b90-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNTMsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-controller-manager\n```\nVerify that the `--service-account-private-key-file` argument is set as appropriate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--service-account-private-key-file` it not set.\n",
      "description": "Explicitly set a service account private key file for service accounts on the controller manager.\n",
      "id": "e48fe269-49e1-56da-85f8-b52c9a47d918",
      "impact": "You would need to securely maintain the key file and rotate the keys based on your organization's key rotation policy.\n",
      "name": "Ensure that the --service-account-private-key-file argument is set as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "To ensure that keys for service account tokens can be rotated as needed, a separate public/private key pair should be used for signing service account tokens. The private key should be specified to the controller manager with `--service-account-private-key-file` as appropriate.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-controller-manager/](https://kubernetes.io/docs/admin/kube-controller-manager/)\n",
      "rego_rule_id": "cis_1_3_4",
      "remediation": "Edit the Controller Manager pod specification file\n`/etc/kubernetes/manifests/kube-controller-manager.yaml` \non the control plane node and set the `--service-account-private-key-file` \nparameter to the private key file for service accounts.\n```\n--service-account-private-key-file=<filename>\n```\n",
      "section": "Controller Manager",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.3.4",
        "Controller Manager"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b91-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNTQsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--client-ca-file` argument exists and it is set as appropriate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--client-ca-file` argument is not set.\n",
      "description": "Setup TLS connection on the API server.\n",
      "id": "e60a7027-cdd7-5a35-afa2-f7a8be2dc845",
      "impact": "TLS and client certificate authentication must be configured for your Kubernetes cluster deployment.\n",
      "name": "Ensure that the --client-ca-file argument is set as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "API server communication contains sensitive parameters that should remain encrypted in transit. Configure the API server to serve only HTTPS traffic. If `--client-ca-file` argument is set, any request presenting a client certificate signed by one of the authorities in the `client-ca-file` is authenticated with an identity corresponding to the CommonName of the client certificate.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/](http://rootsquash.com/2016/05/10/securing-the-kubernetes-api/)\n3. [https://github.com/kelseyhightower/docker-kubernetes-tls-guide](https://github.com/kelseyhightower/docker-kubernetes-tls-guide)\n",
      "rego_rule_id": "cis_1_2_28",
      "remediation": "Follow the Kubernetes documentation and set up the TLS connection on the\napiserver.\nThen, edit the API server pod specification file `/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and set the client certificate authority file.\n```\n--client-ca-file=<path/to/client-ca-file>\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.28",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b92-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNTUsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--audit-log-maxsize` argument is set to `100` or as appropriate.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, auditing is not enabled.\n",
      "description": "Rotate log files on reaching 100 MB or as appropriate.\n",
      "id": "eb641843-bd10-5ec5-9a37-7b6a70feb6e0",
      "impact": "None\n",
      "name": "Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Kubernetes automatically rotates the log files. Retaining old log files ensures that you would have sufficient log data available for carrying out any investigation or correlation. If you have set file size of 100 MB and the number of old log files to keep as 10, you would approximate have 1 GB of log data that you could potentially use for your analysis.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-apiserver/](https://kubernetes.io/docs/admin/kube-apiserver/)\n2. [https://kubernetes.io/docs/concepts/cluster-administration/audit/](https://kubernetes.io/docs/concepts/cluster-administration/audit/)\n3. [https://github.com/kubernetes/features/issues/22](https://github.com/kubernetes/features/issues/22)\n",
      "rego_rule_id": "cis_1_2_22",
      "remediation": "Edit the API server pod specification file\n`/etc/kubernetes/manifests/kube-apiserver.yaml` \non the control plane node and set the `--audit-log-maxsize` parameter to an\nappropriate size in MB. For example, to set it as 100 MB:\n```\n--audit-log-maxsize=100\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.22",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b93-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNTYsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-apiserver\n```\nVerify that the `--authorization-mode` argument exists and is set to a value to include `RBAC`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `RBAC` authorization is not enabled.\n",
      "description": "Turn on Role Based Access Control.\n",
      "id": "ed33b6ba-d276-5b5c-9cdc-85b62de52be1",
      "impact": "When RBAC is enabled you will need to ensure that appropriate RBAC settings (including Roles, RoleBindings and ClusterRoleBindings) are configured to allow appropriate access.\n",
      "name": "Ensure that the --authorization-mode argument includes RBAC (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Role Based Access Control (RBAC) allows fine-grained control over the operations that different entities can perform on different objects in the cluster. It is recommended to use the RBAC authorization mode.\n",
      "references": "1. [https://kubernetes.io/docs/reference/access-authn-authz/rbac/](https://kubernetes.io/docs/reference/access-authn-authz/rbac/)\n",
      "rego_rule_id": "cis_1_2_9",
      "remediation": "Edit the API server pod specification file `/etc/kubernetes/manifests/kube-apiserver.yaml\non the control plane node and set the `--authorization-mode` parameter to a\nvalue that includes `RBAC`, for example:\n```\n--authorization-mode=Node,RBAC\n```\n",
      "section": "API Server",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.2.9",
        "API Server"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b94-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNTcsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-controller-manager\n```\nVerify that the `--profiling` argument is set to `false`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, profiling is enabled.\n",
      "description": "Disable profiling, if not needed.\n",
      "id": "ed431503-ac95-5312-a02b-cf9b51778ad4",
      "impact": "Profiling information would not be available.\n",
      "name": "Ensure that the --profiling argument is set to false (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "Profiling allows for the identification of specific performance bottlenecks. It generates a significant amount of program data that could potentially be exploited to uncover system and program details. If you are not experiencing any bottlenecks and do not need the profiler for troubleshooting purposes, it is recommended to turn it off to reduce the potential attack surface.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-controller-manager/](https://kubernetes.io/docs/admin/kube-controller-manager/)\n2. [https://github.com/kubernetes/community/blob/master/contributors/devel/profiling.md](https://github.com/kubernetes/community/blob/master/contributors/devel/profiling.md)\n",
      "rego_rule_id": "cis_1_3_2",
      "remediation": "Edit the Controller Manager pod specification file\n`/etc/kubernetes/manifests/kube-controller-manager.yaml` on the control plane node and set the below parameter.\n```\n--profiling=false\n```\n",
      "section": "Controller Manager",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.3.2",
        "Controller Manager"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b95-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNTgsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-controller-manager\n```\nVerify that the `--bind-address` argument is set to 127.0.0.1\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, the `--bind-address` parameter is set to 0.0.0.0\n",
      "description": "Do not bind the Controller Manager service to non-loopback insecure addresses.\n",
      "id": "f0d72b13-5130-5045-b94d-bc8d7e00b7fc",
      "impact": "None\n",
      "name": "Ensure that the --bind-address argument is set to 127.0.0.1 (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The Controller Manager API service which runs on port 10252/TCP by default is used for health and metrics information and is available without authentication or encryption. As such it should only be bound to a localhost interface, to minimize the cluster's attack surface\n",
      "references": "1. [https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/](https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/)\n",
      "rego_rule_id": "cis_1_3_7",
      "remediation": "Edit the Controller Manager pod specification file\n`/etc/kubernetes/manifests/kube-controller-manager.yaml` \non the control plane node and ensure the correct value for the `--bind-address parameter`\n",
      "section": "Controller Manager",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.3.7",
        "Controller Manager"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b96-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNTksMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command on the control plane node:\n```\nps -ef | grep kube-controller-manager\n```\nVerify that the `--use-service-account-credentials` argument is set to `true`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `--use-service-account-credentials` is set to false.\n",
      "description": "Use individual service account credentials for each controller.\n",
      "id": "f59951c7-ec2f-52b1-96d7-a7777badc2a7",
      "impact": "Whatever authorizer is configured for the cluster, it must grant sufficient permissions to the service accounts to perform their intended tasks. When using the RBAC authorizer, those roles are created and bound to the appropriate service accounts in the `kube-system` namespace automatically with default roles and rolebindings that are auto-reconciled on startup. If using other authorization methods (ABAC, Webhook, etc), the cluster deployer is responsible for granting appropriate permissions to the service accounts (the required permissions can be seen by inspecting the `controller-roles.yaml` and `controller-role-bindings.yaml` files for the RBAC roles.\n",
      "name": "Ensure that the --use-service-account-credentials argument is set to true (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The controller manager creates a service account per controller in the `kube-system` namespace, generates a credential for it, and builds a dedicated API client with that service account credential for each controller loop to use. Setting the `--use-service-account-credentials`  to true runs each control loop within the controller manager using a separate service account credential. When used in combination with RBAC, this ensures that the control loops run with the minimum permissions required to perform their intended tasks.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-controller-manager/](https://kubernetes.io/docs/admin/kube-controller-manager/)\n2. [https://kubernetes.io/docs/admin/service-accounts-admin/](https://kubernetes.io/docs/admin/service-accounts-admin/)\n3. [https://github.com/kubernetes/kubernetes/blob/release-1.6/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/controller-roles.yaml](https://github.com/kubernetes/kubernetes/blob/release-1.6/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/controller-roles.yaml)\n4. [https://github.com/kubernetes/kubernetes/blob/release-1.6/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/controller-role-bindings.yaml](https://github.com/kubernetes/kubernetes/blob/release-1.6/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/controller-role-bindings.yaml)\n5. [https://kubernetes.io/docs/admin/authorization/rbac/#controller-roles](https://kubernetes.io/docs/admin/authorization/rbac/#controller-roles)\n",
      "rego_rule_id": "cis_1_3_3",
      "remediation": "Edit the Controller Manager pod specification file\n`/etc/kubernetes/manifests/kube-controller-manager.yaml` \non the control plane node to set the below parameter.\n```\n--use-service-account-credentials=true\n```\n",
      "section": "Controller Manager",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.3.3",
        "Controller Manager"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b97-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNjAsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nstat -c %U:%G /etc/kubernetes/manifests/kube-controller-manager.yaml\n```\nVerify that the ownership is set to `root:root`.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `kube-controller-manager.yaml` file ownership is set to `root:root`.\n",
      "description": "Ensure that the controller manager pod specification file ownership is set to `root:root`.\n",
      "id": "f5d3c40c-d915-56d7-b4c4-33d863201c9f",
      "impact": "None\n",
      "name": "Ensure that the controller manager pod specification file ownership is set to root:root (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The controller manager pod specification file controls various parameters that set the behavior of various components of the control plane node. You should set its file ownership to maintain the integrity of the file. The file should be owned by `root:root`.\n",
      "references": "1. [https://kubernetes.io/docs/admin/kube-controller-manager](https://kubernetes.io/docs/admin/kube-controller-manager)\n",
      "rego_rule_id": "cis_1_1_4",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchown root:root /etc/kubernetes/manifests/kube-controller-manager.yaml\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.4",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b98-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNjEsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nstat -c %a /etc/kubernetes/manifests/etcd.yaml\n```\nVerify that the permissions are `644` or more restrictive.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `/etc/kubernetes/manifests/etcd.yaml` file has permissions of `640`.\n",
      "description": "Ensure that the `/etc/kubernetes/manifests/etcd.yaml` file has permissions of `644` or more restrictive.\n",
      "id": "f8239b9d-dbc4-51ee-a4c7-2896ad3b102e",
      "impact": "None\n",
      "name": "Ensure that the etcd pod specification file permissions are set to 644 or more restrictive (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The etcd pod specification file `/etc/kubernetes/manifests/etcd.yaml` controls various parameters that set the behavior of the `etcd` service in the control plane node. etcd is a highly- available key-value store which Kubernetes uses for persistent storage of all of its REST API object. You should restrict its file permissions to maintain the integrity of the file. The file should be writable by only the administrators on the system.\n",
      "references": "1. [https://coreos.com/etcd](https://coreos.com/etcd)\n2. [https://kubernetes.io/docs/admin/etcd/](https://kubernetes.io/docs/admin/etcd/)\n",
      "rego_rule_id": "cis_1_1_7",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchmod 644 /etc/kubernetes/manifests/etcd.yaml\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.7",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b99-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNjIsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "The set of cryptographic ciphers currently considered secure is the\nfollowing:\n* `TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256`\n* `TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`\n* `TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305`\n* `TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`\n* `TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305`\n* `TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`\n* `TLS_RSA_WITH_AES_256_GCM_SHA384`\n* `TLS_RSA_WITH_AES_128_GCM_SHA256`\n\nRun the following command on each node:\n```\nps -ef | grep kubelet\n```\nIf the `--tls-cipher-suites` argument is present, ensure it only contains values included in\nthis set.\nIf it is not present check that there is a Kubelet config file specified by `--config`, and that\nfile sets `TLSCipherSuites:` to only include values from this set.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default the Kubernetes API server supports a wide range of TLS ciphers\n",
      "description": "Ensure that the Kubelet is configured to only use strong cryptographic ciphers.\n",
      "id": "f9d84d7f-a741-5f2a-a454-704554380bca",
      "impact": "Kubelet clients that cannot support modern cryptographic ciphers will not be\nable to make connections to the Kubelet API.\n",
      "name": "Ensure that the Kubelet only makes use of Strong CryptographicCiphers (Manual)",
      "profile_applicability": "* Level 1 - Worker Node\n",
      "rationale": "TLS ciphers have had a number of known vulnerabilities and weaknesses, which can reduce the protection provided by them. By default Kubernetes supports a number of TLS ciphersuites including some that have security concerns, weakening the protection provided.\n",
      "rego_rule_id": "cis_4_2_13",
      "remediation": "If using a Kubelet config file, edit the file to set `TLSCipherSuites`: to\n`TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256`\n,`TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384`\n,`TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384`\n,`TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256` or to a subset\nof these values.\nIf using executable arguments, edit the kubelet service file\n`/etc/systemd/system/kubelet.service.d/10-kubeadm.conf` on each worker node and\nset the `--tls-cipher-suites` parameter as follows, or to a subset of these values.\n```\n--tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM\n_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM\n_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM\n_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256\n```\nBased on your system, restart the kubelet service. For example:\n```\nsystemctl daemon-reload\n  systemctl restart kubelet.service\n```\n",
      "section": "Kubelet",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 4.2.13",
        "Kubelet"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b9a-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNjMsMV0="
}

{
  "attributes": {
    "enabled": true,
    "metadata": {
      "audit": "Run the following command (based on the file location on your system) on the control plane node.\nFor example,\n```\nstat -c %a /etc/kubernetes/admin.conf\n```\nVerify that the permissions are `600` or more restrictive.\n",
      "benchmark": {
        "id": "cis_k8s",
        "name": "CIS Kubernetes V1.23",
        "version": "v1.0.0"
      },
      "default_value": "By default, `admin.conf` has permissions of `640`.\n",
      "description": "Ensure that the `admin.conf` file has permissions of `600`. restrictive.\n",
      "id": "fa54a7f6-30ac-5c16-9f7c-a156c78cf96a",
      "impact": "None.\n",
      "name": "Ensure that the admin.conf file permissions are set to 600 (Automated)",
      "profile_applicability": "* Level 1 - Master Node\n",
      "rationale": "The `admin.conf` is the administrator kubeconfig file defining various settings for the administration of the cluster. This file contains private key and respective certificate allowed to fully manage the cluster. You should restrict its file permissions to maintain the integrity and confidentiality of the file. The file should be readable and writable by only the administrators on the system.\n",
      "references": "1. [https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/](https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/)\n",
      "rego_rule_id": "cis_1_1_13",
      "remediation": "Run the below command (based on the file location on your system) on the\ncontrol plane node.\nFor example,\n```\nchmod 600 /etc/kubernetes/admin.conf\n```\n",
      "section": "Control Plane Node Configuration Files",
      "tags": [
        "CIS",
        "Kubernetes",
        "CIS 1.1.13",
        "Control Plane Node Configuration Files"
      ],
      "version": "1.0"
    },
    "muted": false,
    "package_policy_id": "74fb8d7b-6572-438e-871a-09354a931e3b",
    "policy_id": "7e58b140-2dac-11ed-a472-bd7f99027ef8"
  },
  "coreMigrationVersion": "8.5.0",
  "id": "8cf00b9b-2dac-11ed-a472-bd7f99027ef8",
  "migrationVersion": {
    "csp_rule": "8.4.0"
  },
  "references": [],
  "type": "csp_rule",
  "updated_at": "2022-09-06T06:24:24.056Z",
  "version": "WzEyNjQsMV0="
}